
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import javax.swing.*;
import java.util.Random;

public class ATS extends javax.swing.JFrame {

    /**
     * Creates new form ATS
     */
    public ATS() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        BookingPanel = new javax.swing.JPanel();
        Reverse = new javax.swing.JLabel();
        TripCB = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        Departure = new javax.swing.JLabel();
        From = new javax.swing.JLabel();
        To = new javax.swing.JLabel();
        Pass = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cabin = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        ReturnL = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        ReverseM = new javax.swing.JLabel();
        FromM = new javax.swing.JLabel();
        ToM = new javax.swing.JLabel();
        DepartureM = new javax.swing.JLabel();
        TTF = new javax.swing.JComboBox<>();
        FTFM = new javax.swing.JComboBox<>();
        TTFM = new javax.swing.JComboBox<>();
        FTF = new javax.swing.JComboBox<>();
        Dep = new com.toedter.calendar.JDateChooser();
        Return = new com.toedter.calendar.JDateChooser();
        DepM = new com.toedter.calendar.JDateChooser();
        ConfirmPass = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        area = new javax.swing.JTextArea();
        Print = new javax.swing.JButton();
        ModifyPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        PN = new javax.swing.JTextField();
        FID = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        Cancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Airline Ticket Booking System");
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(74, 31, 61));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Welcome to ATS ");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("X");
        jLabel8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Logout");
        jLabel9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(106, 106, 106)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane2.setBackground(new java.awt.Color(74, 31, 61));
        jTabbedPane2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTabbedPane2.setForeground(new java.awt.Color(255, 255, 255));
        jTabbedPane2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jTabbedPane2.setFont(new java.awt.Font("Leelawadee", 1, 18)); // NOI18N

        BookingPanel.setBackground(new java.awt.Color(186, 79, 84));
        BookingPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        Reverse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/switch.png"))); // NOI18N
        Reverse.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Reverse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ReverseMouseClicked(evt);
            }
        });

        TripCB.setBackground(new java.awt.Color(255, 255, 255));
        TripCB.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        TripCB.setForeground(new java.awt.Color(0, 0, 0));
        TripCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Default>", "One way", "Return", "Multi-city" }));
        TripCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TripCBActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Trip");

        Departure.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Departure.setForeground(new java.awt.Color(0, 0, 0));
        Departure.setText("Departure");

        From.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        From.setForeground(new java.awt.Color(0, 0, 0));
        From.setText("From");

        To.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        To.setForeground(new java.awt.Color(0, 0, 0));
        To.setText("To");

        Pass.setEditable(false);
        Pass.setBackground(new java.awt.Color(255, 255, 255));
        Pass.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Pass.setForeground(new java.awt.Color(0, 0, 0));
        Pass.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Pass.setText("1");
        Pass.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Pass.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PassFocusGained(evt);
            }
        });
        Pass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PassMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PassMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                PassMouseExited(evt);
            }
        });
        Pass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PassActionPerformed(evt);
            }
        });
        Pass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PassKeyPressed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Passengers");

        cabin.setBackground(new java.awt.Color(255, 255, 255));
        cabin.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cabin.setForeground(new java.awt.Color(0, 0, 0));
        cabin.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Economy Class", "Buisness Class", "First Class" }));
        cabin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cabinActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Cabin");

        ReturnL.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        ReturnL.setForeground(new java.awt.Color(0, 0, 0));
        ReturnL.setText("Return");

        jSeparator1.setBackground(new java.awt.Color(255, 255, 255));
        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));

        ReverseM.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/switch.png"))); // NOI18N
        ReverseM.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ReverseM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ReverseMMouseClicked(evt);
            }
        });

        FromM.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        FromM.setForeground(new java.awt.Color(0, 0, 0));
        FromM.setText("From");

        ToM.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        ToM.setForeground(new java.awt.Color(0, 0, 0));
        ToM.setText("To");

        DepartureM.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        DepartureM.setForeground(new java.awt.Color(0, 0, 0));
        DepartureM.setText("Departure");

        TTF.setBackground(new java.awt.Color(255, 255, 255));
        TTF.setEditable(true);
        TTF.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        TTF.setForeground(new java.awt.Color(0, 0, 0));
        TTF.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Aalborg\t", "Aalesund\t", "Aarhus\t", "Abbotsford", "Aberdeen \t", "Abidjan\t", "Abilene", "Abu Dhabi\t", "Abuja\t", "Acapulco\t", "Accra\t", "Adana\t", "Addis Ababa\t", "Adelaide", "Aden\t", "Adiyaman\t", "Agadir\t", "Agana\t", "Aguadilla\t", "Aguascalientes\t", "Ahe", "Ahmedabad\t", "Ajaccio", "Akita\t", "Akron", "Alamosa", "Albany", "Albany", "Albenga", "Albuquerque", "Albury", "Alexandria\t", "Alexandria\t", "Alexandria", "Alexandroupolis\t", "Alghero", "Algiers\t", "Alicante\t", "Alice Springs", "Alice Town", "Allentown", "Alliance", "Almaty\t", "Almeria\t", "Alor Setar", "Alpena", "Altenrhein", "Altoona", "Amarillo", "Amman\t", "Amsterdam\t", "Anahim Lake", "Anahim Lake", "Anchorage", "Ancona\t", "Andros Town\t", "Angeles City\t", "Angra do Heroismo", "Ankara\t", "Annaba\t", "Annecy\t", "Antalya\t", "Antananarivo\t", "Antofagasta\t", "Antwerp\t", "Aomori\t", "Aosta\t", "Appleton", "Ardabil\t", "Arequipa\t", "Argostoli", "Arica\t", "Arkhangelsk\t", "Armidale", "Arrecife", "Arusha\t", "Arviat", "Arvidsjaur", "Asheville", "Asmara\t", "Aspen", "Astana\t", "Asuncion\t", "Aswan\t", "Athens\t", "Athens", "Atlanta", "Atlantic City", "Auckland\t", "Augusta", "Augusta", "Austin", "Avarua", "Ayers Rock", "Bacolod\t", "Badajoz", "Baghdad\t", "Bagotville", "Bagotville", "Baie-Comeau", "Baie-Comeau", "Bakersfield", "Baku\t", "Baku\t", "Balaton\t", "Balephuil\t", "Balikpapan", "Ballina", "Balmaceda\t", "Baltimore", "Ban Me Thuot\t", "Bandar Seri Begawan\t", "Bangalore\t", "Bangda\t", "Bangkok\t", "Bangor", "Bangui\t", "Banjul\t", "Bar Harbor", "Barcelona\t", "Bardufoss\t", "Bari\t", "Barisal\t", "Barranquilla\t", "Barrow", "Basel\t", "Basseterre\t", "Bastia", "Bathurst", "Baton Rouge", "Bauru\t", "Beaumont", "Beauvais\t", "Beckley", "Bedford", "Beef Island, Tortola\t", "Beijing\t", "Beirut\t", "Belem\t", "Belfast\tNorthern", "Belfast\tNorthern ", "Belgrade\t", "Belize City\t", "Bellingham, WA", "Belo Horizonte\t", "Bemidji, MN", "Benbecula\t", "Benguela\t", "Bergen\t", "Berlin\t", "Berne\t", "Bethel, AK \t", "Bettles, AK \t", "Biak, Papua\t", "Biarritz\t", "Bilbao\t", "Billings, MT \t", "Billund\t", "Binghamton, NY ", "Bintulu, Sarawak\t", "Birmingham\t", "Birmingham, AL \t", "Bishkek\t", "Bismarck, ND \t", "Bissau\t", "Blantyre\t", "Blenheim\t", "Bloemfontein\t", "Bloomington, IL ", "Bloomington, IN \t", "Bluefield, WV \t", "Bodo\t", "Bogota\t", "Boise, ID \t", "Bologna\t", "Bolzano\t", "Bordeaux\t", "Borlange\t", "Boston, MA ", "Bozeman, MT \t", "Brasilia\t", "Bratislava\t", "Brazzaville\t", "Bremen\t", "Brest\t", "Bridgetown\t", "Brindisi\t", "Brisbane, Qld.\t", "Bristol\t", "Broken Hill, N.S.W.", "Brookings, SD \t", "Broome, W.A.\t", "Brownsville, TX ", "Brunswick, GA", "Brussels\t", "Bucharest\t", "Budapest\t", "Buenos Aires\t", "Buffalo, NY \t", "Bujumbura\t", "Bulawayo\t", "Bundaberg, Qld.\t", "Burbank, CA \t", "Buri Ram\t", "Burlington, IA \t", "Burlington, MA \t", "Burlington, VT ", "Busan, ", "Butte, MT ", "Butuan\t", "Bydgoszcz\t", "Caen\t", "Cagayan de Oro\t", "Cagliari, Sardinia", "Cairns, Qld.\t", "Cairo\t", "Calcutta\t", "Calgary, AB\t", "Calgary, AB \t", "Cali\t", "Calvi, Corsica\t", "Campbell River, ", "Campbell River,", "Campbeltown\t", "Campeche\t", "Canberra, A.C.T.", "Cancun\t", "Cap-aux-Meules, ", "Cap-aux-Meules, Magdalens Islands", "Cape Girardeau, MO ", "Cape Town\t", "Caracas\t", "Cardiff\t", "Carlsbad, ", "Cartagena\t", "Casablanca\t", "Casper, WY ", "Castlegar, BC\t", "Castlegar, BC \t", "Castries\t", "Catania", "Cayenne", "Cayman ", "Cebu\t", "Cedar Rapids, IA \t", "Ceduna, S.A.", "Champaign", "Changchun", "Changsha\t", "Chania, Crete\t", "Charleston, SC \t", "Charleston, WV \t", "Charleville, Qld.\t", "Charlotte Amalie, St. Thomas\t", "Charlotte, NC \t", "Charlottesville, VA \t", "Charlottetown, PEI\t", "Charlottetown, PEI ", "Chattanooga, TN \t", "Chengdu\t", "Chennai (Madras)\t", "Chetumal\t", "Cheyenne, WY ", "Chiang Mai\t", "Chiang Rai\t", "Chibougamau, PQ", "Chibougamau, PQ \t", "Chicago, IL \t", "Chicago, IL \t", "Chicago, IL \t", "Chico, CA \t", "Chihuahua\t", "Chios\t", "Chisinau\t", "Chongqing\t", "Christchurch\t", "Christiansted, ", "Churchill, MB\t", "Churchill, MB \t", "Cincinnati, OH \t", "Ciudad Bolivar\t", "Ciudad Del Carmen\t", "Ciudad del Este\t", "Ciudad Juarez\t", "Ciudad Obregon\t", "Ciudad Victoria\t", "Clarksburg, WV \t", "Clermont-Ferrand\t", "Cleveland, OH \t", "Clovis, NM \t", "Cockburn Town,", "Cody, WY ", "Coffs Harbour", "Colima\t", "College Station", "Cologne\t", "Colombo\t", "Colorado Springs", "Columbia", "Conakry\t", "Concepcion\t", "Connaught\t", "Coober Pedy, S.A.\t", "Copenhagen\t", "Copiapo\t", "Cordoba", "Cordova, AK", "Cork\t", "Corpus Christi", "Cotabato\t", "Cozumel\t", "Cranbrook, ", "Crotone\t", "Cubi Point Nas\t", "Culiacan\t", "Curitiba\t", "Cusco\t", "Da Nang\t", "Dakar\t", "Dalaman\t", "Dali City\t", "Dalian\t", "Dallas, TX \t", "Damascus\t", "Dangriga\t", "Dar es Salaam", "Darwin, N.T.\t", "Davao\t", "Dawadmi\t", "Dayong\t", "Dayton, OH \t", "Daytona Beach, FL ", "Deadmans Cay,", "Deboyne", "Decatur, IL \t", "Deer Lake, ", "Delhi\t", "Denpasar, Bali\t", "Denver, CO \t", "Des Moines, IA ", "Detroit, MI \t", "Detroit, MI \t", "Devils Lake, ND \t", "Devonport, Tas", "Dhahran\t", "Dhaka\t", "Dickinson, ND \t", "Dien-Bien-Phu\t", "Dillingham, AK", "Dipolog\t", "Djibouti\t", "Dnepropetrovsk\t", "Dodge City, KS \t", "Doha\t", "Doncaster\t", "Donetsk\t", "Dortmund\t", "Dothan, AL ", "Douala\t\t", "Dresden\t", "Dryden, ON\t", "Dryden, ON \t", "Du Bois, ", "Dubai\t", "Dubbo, N.S.W.\t", "Dublin\t", "Dubrovnik", "Dubuque, IA \t", "Duluth, MN ", "Dumaguete\t", "Dunedin\t", "Durango\t", "Durango, CO \t", "Durban\t", "Dushanbe\t", "Dusseldorf\t", "Dutch Harbor, Un Island, AK", "East London\t", "East Midlands\t", "Eau Claire, WI ", "Edinburgh\t", "Edmonton, AB\t", "Eek, AK \t", "Ekaterinburg, ", "El Calafate\t", "El Centro, CA \t", "El Dorado, AR \t", "El Paso, TX \t", "El Salvador\t", "Elko, NV \t", "Elmira, NY \t", "Emerald, Qld.", "Enid, OK \t", "Entebbe\t", "Erfurt\t", "Erie, PA \t", "Esbjerg\t", "Escanaba, MI ", "Eugene, OR \t", "Eureka, CA\t", "Evansville, IN \t", "Evenes\t", "Fairbanks, AK \t", "Fargo, ND \t", "Farmington, NM ", "Faro\t", "Fayetteville, AR \t", "Fayetteville, NC \t", "Fernando de Noronha", "Figari, Corsica\t", "Flagstaff, AZ \t", "Flin Flon, ", "Flin Flon,", "Flint, MI \t", "Florence\t", "Florence, SC \t", "Flores\t", "Fort Dodge, IA \t", "Fort Lauderdale, FL \t", "Fort Leonard Wood, MO", "Fort McMurray, AB", "Fort McMurray, AB \t", "Fort Myers, FL \t", "Fort Nelson, BC\t", "Fort Nelson, BC \t", "Fort Saint John, BC\t", "Fort Saint John, BC \t", "Fort Smith, AR \t", "Fort Smith, ", "Fort Walton Beach, FL ", "Fort Wayne", "Fort Yukon", "Fort-de-France\t", "Frankfurt\t", "Fredericton, NB\t", "Fredericton, NB \t", "Freeport, ", "Freetown\t", "Fresno, CA \t", "Friedrichshafen\t", "Fukuoka\t", "Fukushima\t", "Funchal\t", "Fuzhou\t", "Gainesville, FL \t", "Gander, NF\t", "Gander, NF ", "Garden City, KS\t", "Gaspe, PQ\t", "Gaspe, PQ \t", "Gdansk\t", "General Santos\t", "Geneva\t", "Genoa\t", "George Town", "Georgetown\t", "Georgetown, ", "Gillette, WY \t", "Gisborne\t", "Gladstone, Qld.", "Glasgow\t", "Glasgow\t", "Glendive, MT \t", "Gold Coast, Qld.\t", "Gothenburg\t", "Gove, N.T.\t", "Governor's Harbour, Eleuthera Island\t", "Granada\t", "Grand Forks, ND \t", "Grand Island, NE \t", "Grand Junction, CO \t", "Grand Rapids, MI \t", "Grande Prairie, AB\t", "Grande Prairie, AB ", "Graz\t", "Great Bend, KS ", "Great Falls, MT \t", "Green Bay, WI ", "Greenbrier, WV\t", "Greensboro, NC \t", "Greenville, MS ", "Greenville, NC \t", "Griffith, N.S.W.\t", "Guadalajara", "Guangzhou\t", "Guatemala City\t", "Guayaquil\t", "Guaymas\t", "Guernsey\t", "Guilin\t", "Gulfport, MS \t", "Gunnison, CO \t", "Gustavia\t", "Hagerstown, ", "Haikou, ", "Hailar\t", "Hakodate\t", "Halifax, NS\t", "Halifax, NS \t", "Halmstad\t", "Hamburg\t", "Hamilton\t", "Hamilton\t", "Hamilton Island", "Hamilton, ON\t", "Hamilton, ON \t", "Hammerfest\t", "Hana, Maui, HI\t", "Hancock, MI \t", "Hanga Roa, Easter Island\t", "Hangzhou\t", "Hannover\t", "Hanoi\t", "Harare\t", "Harbin\t", "Harlingen, TX \t", "Harrisburg, PA \t", "Harrison, AR \t", "Hartford, CT \t", "Hat Yai\t", "Haugesund\t", "Havana\t", "Havre, MT ", "Hays, KS\t", "Hefei\t", "Helena, MT \t", "Helsingborg\t", "Helsinki\t", "Hemavan\t", "Hengchun", "Heraklion, Crete\t", "Hermosillo\t", "Hibbing, MN \t", "Hilo, Hawaii \t", "Hilton Head Island, SC ", "Ho Chi Minh City (Saigon)", "Hobart, Tas.\t", "Hobbs, NM \t", "Hof\t", "Hohhot\t", "Hokitika\t", "Homer, AK\t", "Hong Kong\t", "Honiara, Guadalcanal\t", "Honolulu, ", "Hoolehua, ", "Horn Island, ", "Hot Springs, ", "Houmt Souk\t", "Houston, TX ", "Hue\t", "Humberside\t", "Huntington, WV \t", "Huntsville, AL ", "Hurghada\t", "Huron, SD\t", "Hyannis, MA \t", "Hyderabad\t", "Ibadan\t", "Ibiza\t", "Ikaria Island\t", "Iloilo\t", "Indianapolis", "Innsbruck\t", "International Falls", "Invercargill\t", "Inverness\t", "Inyokern, CA ", "Ioannina\t", "Ipoh\t", "Iqaluit, Nunavut\t", "Iqaluit, Nunavut \t", "Irkutsk, Siberia\t", "Iron Mountain, MI \t", "Ironwood, MI\t", "Islamabad-Rawalpindi", "Islay Island\t", "Islip, NY \t", "Istanbul\t", "Istanbul\t", "Ithaca, NY \t", "Ivalo\t", "Iwami\t", "Ixtapa\t", "Izmir\t", "Izumo\t", "Jackson Hole, WY ", "Jackson, MS ", "Jackson, TN ", "Jacksonville, FL \t", "Jacksonville, NC ", "Jakarta, Java\t", "Jakarta, Java\t", "Jalapa\t", "Jamestown,", "Jamestown,", "Jeddah\t", "Jeju, ", "Jerez de La Frontera\t", "Jersey\t", "Jiamusi\t", "Jijiga\t", "Joensuu\t", "Johannesburg\t", "Johnstown, PA", "Johor Bahru\t", "Jonesboro, AR ", "Jonkoping\t", "Joplin, MO", "Juneau, AK ", "Jyvaskyla\t", "Kabul\t", "Kagoshima\t", "Kahului, Maui, HI \t", "Kailua-Kona,", "Kaitaia\t", "Kajaani\t", "Kalamazoo, ", "Kalaupapa, Molokai", "Kalgoorlie, W.A.", "Kalibo", "Kaliningrad\t", "Kalispell, MT \t", "Kalmar\t", "Kamloops, BC", "Kamloops", "Kamuela", "Kansas City", "Kaohsiung\t", "Kapalua", "Karachi", "Karaganda\t", "Karlstad\t", "Karratha", "Karup\t", "Kashi", "Kathmandu\t", "Katowice\t", "Kearney", "Kelowna", "Kenai,", "Kenora, ON \t", "Kerikeri\t", "Ketchikan, AK ", "Key West, FL \t", "Kharkov\t", "Khartoum\t", "Khon Kaen\t", "Kiel\t", "Kiev\t", "Kigali\t", "Killeen", "King Salmon", "Kingman", "Kingscote", "Kingstow", "Kinshasa\t", "Kirksville, MO \t", "Kirkwall, Orkney Islands\t", "Kiruna\t", "Kisangani\t", "Kittila\t", "Klagenfurt\t", "Klamath Falls, OR ", "Kodiak, AK ", "Koh Samui\t", "Komatsu\t", "Koror", "Kos\t", "Kosrae", "Kota ", "Krabi\t", "Krakow\t", "Kralendijk\t", "Kramfors", "Kristiansand\t", "Kristianstad\t", "Kuala Lumpur\t", "Kuala Terengganu", "Kuantan\t", "Kuching, ", "Kumamoto\t", "Kunming\t", "Kuopio\t", "Kushiro\t", "Kuwait\t", "Kzyl Orda\t", "La Coruna\t", "La Crosse, WI ", "La Paz\t", "La Paz\t", "La Romana\t", "La Serena\t", "Lafayette,", "Lagos\t", "Lahad Datu", "Lahore\t", "Lake Charles, LA ", "Lake Havasu City", "Lamezia Terme\t", "Lanai City,", "Lancaster, PA ", "Langkawi\t", "Lannion", "Lansing, MI \t", "Lanzhou\t", "Laramie, WY \t", "Laredo, TX \t", "Larnaca\t", "Las Cruces, NM \t", "Las Palmas", "Las Vegas, NV \t", "Latrobe, PA \t", "Launceston, Tas.\t", "Laurel, MS ", "Lawton, OK \t", "Lazaro Cardenas", "Le Havre\t", "Lebanon", "Leeds\t", "Legaspi\t", "Leipzig\t", "Leon\t", "Leon\t", "Lerwick", "Lethbridge", "Lewiston, ", "Lexington", "Lhasa", "Liberal", "Libreville\t", "Lihue", "Lille\t", "Lilongwe\t", "Limoges", "Lincang\t", "Lincoln, ", "Linkoping\t", "Linz\t", "Lisbon\t", "Little Rock,", "Liverpool\t", "Ljubljana\t", "Logrono\t", "Lome\t", "London\t", "Londonderry\t", "Long Banga\t", "Long Beach, ", "Longreach, ", "Longview, ", "Longyearbyen", "Loreto\t", "Lorient\t", "Los Angeles", "Los Cabos\t", "Louisville", "Lourdes\t", "Luanda\t", "Lubbock ", "Lubumbashi\t", "Lugano\t", "Lugansk\t", "Lukla\t", "Lulea\t", "Lusaka", "Luton\t", "Luxembourg\t", "Luxor\t", "Lycksele\t", "Lynchburg, VA ", "Lyon\t", "Mackay, Qld.\t", "Macon, ", "Madison,", "Madrid\t", "Mae Hong Son\t", "Magdalens Islands\t", "Mahebourg\t", "Majuro\t", "Mala Mala\t", "Malabo, ", "Malaga\t", "Male\t", "Malmo\t", "Malmo\t", "Managua\t", "Manama\t", "Manaus\t", "Manchester\t", "Manchester, NH ", "Mangrove Cay, ", "Manhattan, KS ", "Manila\t", "Manistee, MI ", "Manzanillo\t", "Manzini", "Mao, Minorca\t", "Maputo\t", "Maracaibo\t", "Mariehamn,", "Marilia\t", "Marion, ", "Mariupol\t", "Maroochydore,", "Marquette,", "Marrakech", "Marseille\t", "Marsh Harbour", "Martha's Vineyard,", "Maseru\t", "Mason City,", "Massena, ", "Matsu\t", "Matsuyama\t", "Mazatlan\t", "McAllen, ", "McCook, ", "Medan, ", "Medellin\t", "Medicine ", "Melbourne", "Melilla\t", "Memanbetsu\t", "Memphis, TN \t", "Mendoza\t", "Merida\t", "Meridian, MS \t", "Merimbula, N.S.W.\t", "Metz\t", "Mexicali\t", "Mexico City", "Miami, FL \t", "Mian Yang\t", "Midland", "Mikonos\t", "Milan\t", "Mildura, Vic.\t", "Miles City", "Milwaukee", "Minneapolis", "Minot", "Minsk\t", "Miri, ", "Misawa\t", "Missoula", "Miyazaki\t", "Mobile", "Modesto", "Mogadishu\t", "Moline", "Mombasa\t", "Monastir\t", "Monclova\t", "Moncton", "Monroe", "Monrovia\t", "Mont-Joli", "Montego Bay\t", "Monterey", "Monterrey\t", "Montevideo\t", "Montgomery", "Montpellier\t", "Montreal", "Mora\t", "Moree", "Morelia\t", "Morgantown", "Moroni\t", "Moruya", "Moscow", "Moscow", "Moscow\t", "Moses Lake", "Mount Gambier", "Mount Isa", "Mudanjiang\t", "Mulhouse\t", "Mulhouse\t", "Mulu\t", "Mumbai", "Munich\t", "Munster\t", "Murcia\t", "Murmansk\t", "Muscat\t", "Muscle Shoals", "Muskegon", "Myrtle Beach", "Mytilene", "N'Djamena", "Nadi\t", "Nador\t", "Nagasaki", "Nagoya", "Nagoya\t", "Naha", "Nairobi\t", "Nakhon Si Thammarat\t", "Nanaimo", "Nanaimo", "Nanchang\t", "Nangen\t", "Nanjing\t", "Nanki ", "Nanning", "Nantes\t", "Nantucket", "Napier\t", "Naples", "Naples", "Narrabri", "Narrandera", "Narvik\t", "Naryan Mar", "Nashville", "Nassau\t", "Naze", "Nelson\t", "Nelspruit\t", "New Bern", "New Haven", "New Orleans", "New York", "Newark", "Newburgh", "Newcastle", "Newman, W.A.\t", "Newport News", "Niamey\t", "Nice\t", "Niigata\t", "Ningbo\t", "Nizhniy Novgorod\t", "Nome, AK " }));
        TTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TTFActionPerformed(evt);
            }
        });

        FTFM.setBackground(new java.awt.Color(255, 255, 255));
        FTFM.setEditable(true);
        FTFM.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        FTFM.setForeground(new java.awt.Color(0, 0, 0));
        FTFM.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Aalborg\t", "Aalesund\t", "Aarhus\t", "Abbotsford", "Aberdeen \t", "Abidjan\t", "Abilene", "Abu Dhabi\t", "Abuja\t", "Acapulco\t", "Accra\t", "Adana\t", "Addis Ababa\t", "Adelaide", "Aden\t", "Adiyaman\t", "Agadir\t", "Agana\t", "Aguadilla\t", "Aguascalientes\t", "Ahe", "Ahmedabad\t", "Ajaccio", "Akita\t", "Akron", "Alamosa", "Albany", "Albany", "Albenga", "Albuquerque", "Albury", "Alexandria\t", "Alexandria\t", "Alexandria", "Alexandroupolis\t", "Alghero", "Algiers\t", "Alicante\t", "Alice Springs", "Alice Town", "Allentown", "Alliance", "Almaty\t", "Almeria\t", "Alor Setar", "Alpena", "Altenrhein", "Altoona", "Amarillo", "Amman\t", "Amsterdam\t", "Anahim Lake", "Anahim Lake", "Anchorage", "Ancona\t", "Andros Town\t", "Angeles City\t", "Angra do Heroismo", "Ankara\t", "Annaba\t", "Annecy\t", "Antalya\t", "Antananarivo\t", "Antofagasta\t", "Antwerp\t", "Aomori\t", "Aosta\t", "Appleton", "Ardabil\t", "Arequipa\t", "Argostoli", "Arica\t", "Arkhangelsk\t", "Armidale", "Arrecife", "Arusha\t", "Arviat", "Arvidsjaur", "Asheville", "Asmara\t", "Aspen", "Astana\t", "Asuncion\t", "Aswan\t", "Athens\t", "Athens", "Atlanta", "Atlantic City", "Auckland\t", "Augusta", "Augusta", "Austin", "Avarua", "Ayers Rock", "Bacolod\t", "Badajoz", "Baghdad\t", "Bagotville", "Bagotville", "Baie-Comeau", "Baie-Comeau", "Bakersfield", "Baku\t", "Baku\t", "Balaton\t", "Balephuil\t", "Balikpapan", "Ballina", "Balmaceda\t", "Baltimore", "Ban Me Thuot\t", "Bandar Seri Begawan\t", "Bangalore\t", "Bangda\t", "Bangkok\t", "Bangor", "Bangui\t", "Banjul\t", "Bar Harbor", "Barcelona\t", "Bardufoss\t", "Bari\t", "Barisal\t", "Barranquilla\t", "Barrow", "Basel\t", "Basseterre\t", "Bastia", "Bathurst", "Baton Rouge", "Bauru\t", "Beaumont", "Beauvais\t", "Beckley", "Bedford", "Beef Island, Tortola\t", "Beijing\t", "Beirut\t", "Belem\t", "Belfast\tNorthern", "Belfast\tNorthern ", "Belgrade\t", "Belize City\t", "Bellingham, WA", "Belo Horizonte\t", "Bemidji, MN", "Benbecula\t", "Benguela\t", "Bergen\t", "Berlin\t", "Berne\t", "Bethel, AK \t", "Bettles, AK \t", "Biak, Papua\t", "Biarritz\t", "Bilbao\t", "Billings, MT \t", "Billund\t", "Binghamton, NY ", "Bintulu, Sarawak\t", "Birmingham\t", "Birmingham, AL \t", "Bishkek\t", "Bismarck, ND \t", "Bissau\t", "Blantyre\t", "Blenheim\t", "Bloemfontein\t", "Bloomington, IL ", "Bloomington, IN \t", "Bluefield, WV \t", "Bodo\t", "Bogota\t", "Boise, ID \t", "Bologna\t", "Bolzano\t", "Bordeaux\t", "Borlange\t", "Boston, MA ", "Bozeman, MT \t", "Brasilia\t", "Bratislava\t", "Brazzaville\t", "Bremen\t", "Brest\t", "Bridgetown\t", "Brindisi\t", "Brisbane, Qld.\t", "Bristol\t", "Broken Hill, N.S.W.", "Brookings, SD \t", "Broome, W.A.\t", "Brownsville, TX ", "Brunswick, GA", "Brussels\t", "Bucharest\t", "Budapest\t", "Buenos Aires\t", "Buffalo, NY \t", "Bujumbura\t", "Bulawayo\t", "Bundaberg, Qld.\t", "Burbank, CA \t", "Buri Ram\t", "Burlington, IA \t", "Burlington, MA \t", "Burlington, VT ", "Busan, ", "Butte, MT ", "Butuan\t", "Bydgoszcz\t", "Caen\t", "Cagayan de Oro\t", "Cagliari, Sardinia", "Cairns, Qld.\t", "Cairo\t", "Calcutta\t", "Calgary, AB\t", "Calgary, AB \t", "Cali\t", "Calvi, Corsica\t", "Campbell River, ", "Campbell River,", "Campbeltown\t", "Campeche\t", "Canberra, A.C.T.", "Cancun\t", "Cap-aux-Meules, ", "Cap-aux-Meules, Magdalens Islands", "Cape Girardeau, MO ", "Cape Town\t", "Caracas\t", "Cardiff\t", "Carlsbad, ", "Cartagena\t", "Casablanca\t", "Casper, WY ", "Castlegar, BC\t", "Castlegar, BC \t", "Castries\t", "Catania", "Cayenne", "Cayman ", "Cebu\t", "Cedar Rapids, IA \t", "Ceduna, S.A.", "Champaign", "Changchun", "Changsha\t", "Chania, Crete\t", "Charleston, SC \t", "Charleston, WV \t", "Charleville, Qld.\t", "Charlotte Amalie, St. Thomas\t", "Charlotte, NC \t", "Charlottesville, VA \t", "Charlottetown, PEI\t", "Charlottetown, PEI ", "Chattanooga, TN \t", "Chengdu\t", "Chennai (Madras)\t", "Chetumal\t", "Cheyenne, WY ", "Chiang Mai\t", "Chiang Rai\t", "Chibougamau, PQ", "Chibougamau, PQ \t", "Chicago, IL \t", "Chicago, IL \t", "Chicago, IL \t", "Chico, CA \t", "Chihuahua\t", "Chios\t", "Chisinau\t", "Chongqing\t", "Christchurch\t", "Christiansted, ", "Churchill, MB\t", "Churchill, MB \t", "Cincinnati, OH \t", "Ciudad Bolivar\t", "Ciudad Del Carmen\t", "Ciudad del Este\t", "Ciudad Juarez\t", "Ciudad Obregon\t", "Ciudad Victoria\t", "Clarksburg, WV \t", "Clermont-Ferrand\t", "Cleveland, OH \t", "Clovis, NM \t", "Cockburn Town,", "Cody, WY ", "Coffs Harbour", "Colima\t", "College Station", "Cologne\t", "Colombo\t", "Colorado Springs", "Columbia", "Conakry\t", "Concepcion\t", "Connaught\t", "Coober Pedy, S.A.\t", "Copenhagen\t", "Copiapo\t", "Cordoba", "Cordova, AK", "Cork\t", "Corpus Christi", "Cotabato\t", "Cozumel\t", "Cranbrook, ", "Crotone\t", "Cubi Point Nas\t", "Culiacan\t", "Curitiba\t", "Cusco\t", "Da Nang\t", "Dakar\t", "Dalaman\t", "Dali City\t", "Dalian\t", "Dallas, TX \t", "Damascus\t", "Dangriga\t", "Dar es Salaam", "Darwin, N.T.\t", "Davao\t", "Dawadmi\t", "Dayong\t", "Dayton, OH \t", "Daytona Beach, FL ", "Deadmans Cay,", "Deboyne", "Decatur, IL \t", "Deer Lake, ", "Delhi\t", "Denpasar, Bali\t", "Denver, CO \t", "Des Moines, IA ", "Detroit, MI \t", "Detroit, MI \t", "Devils Lake, ND \t", "Devonport, Tas", "Dhahran\t", "Dhaka\t", "Dickinson, ND \t", "Dien-Bien-Phu\t", "Dillingham, AK", "Dipolog\t", "Djibouti\t", "Dnepropetrovsk\t", "Dodge City, KS \t", "Doha\t", "Doncaster\t", "Donetsk\t", "Dortmund\t", "Dothan, AL ", "Douala\t\t", "Dresden\t", "Dryden, ON\t", "Dryden, ON \t", "Du Bois, ", "Dubai\t", "Dubbo, N.S.W.\t", "Dublin\t", "Dubrovnik", "Dubuque, IA \t", "Duluth, MN ", "Dumaguete\t", "Dunedin\t", "Durango\t", "Durango, CO \t", "Durban\t", "Dushanbe\t", "Dusseldorf\t", "Dutch Harbor, Un Island, AK", "East London\t", "East Midlands\t", "Eau Claire, WI ", "Edinburgh\t", "Edmonton, AB\t", "Eek, AK \t", "Ekaterinburg, ", "El Calafate\t", "El Centro, CA \t", "El Dorado, AR \t", "El Paso, TX \t", "El Salvador\t", "Elko, NV \t", "Elmira, NY \t", "Emerald, Qld.", "Enid, OK \t", "Entebbe\t", "Erfurt\t", "Erie, PA \t", "Esbjerg\t", "Escanaba, MI ", "Eugene, OR \t", "Eureka, CA\t", "Evansville, IN \t", "Evenes\t", "Fairbanks, AK \t", "Fargo, ND \t", "Farmington, NM ", "Faro\t", "Fayetteville, AR \t", "Fayetteville, NC \t", "Fernando de Noronha", "Figari, Corsica\t", "Flagstaff, AZ \t", "Flin Flon, ", "Flin Flon,", "Flint, MI \t", "Florence\t", "Florence, SC \t", "Flores\t", "Fort Dodge, IA \t", "Fort Lauderdale, FL \t", "Fort Leonard Wood, MO", "Fort McMurray, AB", "Fort McMurray, AB \t", "Fort Myers, FL \t", "Fort Nelson, BC\t", "Fort Nelson, BC \t", "Fort Saint John, BC\t", "Fort Saint John, BC \t", "Fort Smith, AR \t", "Fort Smith, ", "Fort Walton Beach, FL ", "Fort Wayne", "Fort Yukon", "Fort-de-France\t", "Frankfurt\t", "Fredericton, NB\t", "Fredericton, NB \t", "Freeport, ", "Freetown\t", "Fresno, CA \t", "Friedrichshafen\t", "Fukuoka\t", "Fukushima\t", "Funchal\t", "Fuzhou\t", "Gainesville, FL \t", "Gander, NF\t", "Gander, NF ", "Garden City, KS\t", "Gaspe, PQ\t", "Gaspe, PQ \t", "Gdansk\t", "General Santos\t", "Geneva\t", "Genoa\t", "George Town", "Georgetown\t", "Georgetown, ", "Gillette, WY \t", "Gisborne\t", "Gladstone, Qld.", "Glasgow\t", "Glasgow\t", "Glendive, MT \t", "Gold Coast, Qld.\t", "Gothenburg\t", "Gove, N.T.\t", "Governor's Harbour, Eleuthera Island\t", "Granada\t", "Grand Forks, ND \t", "Grand Island, NE \t", "Grand Junction, CO \t", "Grand Rapids, MI \t", "Grande Prairie, AB\t", "Grande Prairie, AB ", "Graz\t", "Great Bend, KS ", "Great Falls, MT \t", "Green Bay, WI ", "Greenbrier, WV\t", "Greensboro, NC \t", "Greenville, MS ", "Greenville, NC \t", "Griffith, N.S.W.\t", "Guadalajara", "Guangzhou\t", "Guatemala City\t", "Guayaquil\t", "Guaymas\t", "Guernsey\t", "Guilin\t", "Gulfport, MS \t", "Gunnison, CO \t", "Gustavia\t", "Hagerstown, ", "Haikou, ", "Hailar\t", "Hakodate\t", "Halifax, NS\t", "Halifax, NS \t", "Halmstad\t", "Hamburg\t", "Hamilton\t", "Hamilton\t", "Hamilton Island", "Hamilton, ON\t", "Hamilton, ON \t", "Hammerfest\t", "Hana, Maui, HI\t", "Hancock, MI \t", "Hanga Roa, Easter Island\t", "Hangzhou\t", "Hannover\t", "Hanoi\t", "Harare\t", "Harbin\t", "Harlingen, TX \t", "Harrisburg, PA \t", "Harrison, AR \t", "Hartford, CT \t", "Hat Yai\t", "Haugesund\t", "Havana\t", "Havre, MT ", "Hays, KS\t", "Hefei\t", "Helena, MT \t", "Helsingborg\t", "Helsinki\t", "Hemavan\t", "Hengchun", "Heraklion, Crete\t", "Hermosillo\t", "Hibbing, MN \t", "Hilo, Hawaii \t", "Hilton Head Island, SC ", "Ho Chi Minh City (Saigon)", "Hobart, Tas.\t", "Hobbs, NM \t", "Hof\t", "Hohhot\t", "Hokitika\t", "Homer, AK\t", "Hong Kong\t", "Honiara, Guadalcanal\t", "Honolulu, ", "Hoolehua, ", "Horn Island, ", "Hot Springs, ", "Houmt Souk\t", "Houston, TX ", "Hue\t", "Humberside\t", "Huntington, WV \t", "Huntsville, AL ", "Hurghada\t", "Huron, SD\t", "Hyannis, MA \t", "Hyderabad\t", "Ibadan\t", "Ibiza\t", "Ikaria Island\t", "Iloilo\t", "Indianapolis", "Innsbruck\t", "International Falls", "Invercargill\t", "Inverness\t", "Inyokern, CA ", "Ioannina\t", "Ipoh\t", "Iqaluit, Nunavut\t", "Iqaluit, Nunavut \t", "Irkutsk, Siberia\t", "Iron Mountain, MI \t", "Ironwood, MI\t", "Islamabad-Rawalpindi", "Islay Island\t", "Islip, NY \t", "Istanbul\t", "Istanbul\t", "Ithaca, NY \t", "Ivalo\t", "Iwami\t", "Ixtapa\t", "Izmir\t", "Izumo\t", "Jackson Hole, WY ", "Jackson, MS ", "Jackson, TN ", "Jacksonville, FL \t", "Jacksonville, NC ", "Jakarta, Java\t", "Jakarta, Java\t", "Jalapa\t", "Jamestown,", "Jamestown,", "Jeddah\t", "Jeju, ", "Jerez de La Frontera\t", "Jersey\t", "Jiamusi\t", "Jijiga\t", "Joensuu\t", "Johannesburg\t", "Johnstown, PA", "Johor Bahru\t", "Jonesboro, AR ", "Jonkoping\t", "Joplin, MO", "Juneau, AK ", "Jyvaskyla\t", "Kabul\t", "Kagoshima\t", "Kahului, Maui, HI \t", "Kailua-Kona,", "Kaitaia\t", "Kajaani\t", "Kalamazoo, ", "Kalaupapa, Molokai", "Kalgoorlie, W.A.", "Kalibo", "Kaliningrad\t", "Kalispell, MT \t", "Kalmar\t", "Kamloops, BC", "Kamloops", "Kamuela", "Kansas City", "Kaohsiung\t", "Kapalua", "Karachi", "Karaganda\t", "Karlstad\t", "Karratha", "Karup\t", "Kashi", "Kathmandu\t", "Katowice\t", "Kearney", "Kelowna", "Kenai,", "Kenora, ON \t", "Kerikeri\t", "Ketchikan, AK ", "Key West, FL \t", "Kharkov\t", "Khartoum\t", "Khon Kaen\t", "Kiel\t", "Kiev\t", "Kigali\t", "Killeen", "King Salmon", "Kingman", "Kingscote", "Kingstow", "Kinshasa\t", "Kirksville, MO \t", "Kirkwall, Orkney Islands\t", "Kiruna\t", "Kisangani\t", "Kittila\t", "Klagenfurt\t", "Klamath Falls, OR ", "Kodiak, AK ", "Koh Samui\t", "Komatsu\t", "Koror", "Kos\t", "Kosrae", "Kota ", "Krabi\t", "Krakow\t", "Kralendijk\t", "Kramfors", "Kristiansand\t", "Kristianstad\t", "Kuala Lumpur\t", "Kuala Terengganu", "Kuantan\t", "Kuching, ", "Kumamoto\t", "Kunming\t", "Kuopio\t", "Kushiro\t", "Kuwait\t", "Kzyl Orda\t", "La Coruna\t", "La Crosse, WI ", "La Paz\t", "La Paz\t", "La Romana\t", "La Serena\t", "Lafayette,", "Lagos\t", "Lahad Datu", "Lahore\t", "Lake Charles, LA ", "Lake Havasu City", "Lamezia Terme\t", "Lanai City,", "Lancaster, PA ", "Langkawi\t", "Lannion", "Lansing, MI \t", "Lanzhou\t", "Laramie, WY \t", "Laredo, TX \t", "Larnaca\t", "Las Cruces, NM \t", "Las Palmas", "Las Vegas, NV \t", "Latrobe, PA \t", "Launceston, Tas.\t", "Laurel, MS ", "Lawton, OK \t", "Lazaro Cardenas", "Le Havre\t", "Lebanon", "Leeds\t", "Legaspi\t", "Leipzig\t", "Leon\t", "Leon\t", "Lerwick", "Lethbridge", "Lewiston, ", "Lexington", "Lhasa", "Liberal", "Libreville\t", "Lihue", "Lille\t", "Lilongwe\t", "Limoges", "Lincang\t", "Lincoln, ", "Linkoping\t", "Linz\t", "Lisbon\t", "Little Rock,", "Liverpool\t", "Ljubljana\t", "Logrono\t", "Lome\t", "London\t", "Londonderry\t", "Long Banga\t", "Long Beach, ", "Longreach, ", "Longview, ", "Longyearbyen", "Loreto\t", "Lorient\t", "Los Angeles", "Los Cabos\t", "Louisville", "Lourdes\t", "Luanda\t", "Lubbock ", "Lubumbashi\t", "Lugano\t", "Lugansk\t", "Lukla\t", "Lulea\t", "Lusaka", "Luton\t", "Luxembourg\t", "Luxor\t", "Lycksele\t", "Lynchburg, VA ", "Lyon\t", "Mackay, Qld.\t", "Macon, ", "Madison,", "Madrid\t", "Mae Hong Son\t", "Magdalens Islands\t", "Mahebourg\t", "Majuro\t", "Mala Mala\t", "Malabo, ", "Malaga\t", "Male\t", "Malmo\t", "Malmo\t", "Managua\t", "Manama\t", "Manaus\t", "Manchester\t", "Manchester, NH ", "Mangrove Cay, ", "Manhattan, KS ", "Manila\t", "Manistee, MI ", "Manzanillo\t", "Manzini", "Mao, Minorca\t", "Maputo\t", "Maracaibo\t", "Mariehamn,", "Marilia\t", "Marion, ", "Mariupol\t", "Maroochydore,", "Marquette,", "Marrakech", "Marseille\t", "Marsh Harbour", "Martha's Vineyard,", "Maseru\t", "Mason City,", "Massena, ", "Matsu\t", "Matsuyama\t", "Mazatlan\t", "McAllen, ", "McCook, ", "Medan, ", "Medellin\t", "Medicine ", "Melbourne", "Melilla\t", "Memanbetsu\t", "Memphis, TN \t", "Mendoza\t", "Merida\t", "Meridian, MS \t", "Merimbula, N.S.W.\t", "Metz\t", "Mexicali\t", "Mexico City", "Miami, FL \t", "Mian Yang\t", "Midland", "Mikonos\t", "Milan\t", "Mildura, Vic.\t", "Miles City", "Milwaukee", "Minneapolis", "Minot", "Minsk\t", "Miri, ", "Misawa\t", "Missoula", "Miyazaki\t", "Mobile", "Modesto", "Mogadishu\t", "Moline", "Mombasa\t", "Monastir\t", "Monclova\t", "Moncton", "Monroe", "Monrovia\t", "Mont-Joli", "Montego Bay\t", "Monterey", "Monterrey\t", "Montevideo\t", "Montgomery", "Montpellier\t", "Montreal", "Mora\t", "Moree", "Morelia\t", "Morgantown", "Moroni\t", "Moruya", "Moscow", "Moscow", "Moscow\t", "Moses Lake", "Mount Gambier", "Mount Isa", "Mudanjiang\t", "Mulhouse\t", "Mulhouse\t", "Mulu\t", "Mumbai", "Munich\t", "Munster\t", "Murcia\t", "Murmansk\t", "Muscat\t", "Muscle Shoals", "Muskegon", "Myrtle Beach", "Mytilene", "N'Djamena", "Nadi\t", "Nador\t", "Nagasaki", "Nagoya", "Nagoya\t", "Naha", "Nairobi\t", "Nakhon Si Thammarat\t", "Nanaimo", "Nanaimo", "Nanchang\t", "Nangen\t", "Nanjing\t", "Nanki ", "Nanning", "Nantes\t", "Nantucket", "Napier\t", "Naples", "Naples", "Narrabri", "Narrandera", "Narvik\t", "Naryan Mar", "Nashville", "Nassau\t", "Naze", "Nelson\t", "Nelspruit\t", "New Bern", "New Haven", "New Orleans", "New York", "Newark", "Newburgh", "Newcastle", "Newman, W.A.\t", "Newport News", "Niamey\t", "Nice\t", "Niigata\t", "Ningbo\t", "Nizhniy Novgorod\t", "Nome, AK " }));
        FTFM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FTFMActionPerformed(evt);
            }
        });

        TTFM.setBackground(new java.awt.Color(255, 255, 255));
        TTFM.setEditable(true);
        TTFM.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        TTFM.setForeground(new java.awt.Color(0, 0, 0));
        TTFM.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Aalborg\t", "Aalesund\t", "Aarhus\t", "Abbotsford", "Aberdeen \t", "Abidjan\t", "Abilene", "Abu Dhabi\t", "Abuja\t", "Acapulco\t", "Accra\t", "Adana\t", "Addis Ababa\t", "Adelaide", "Aden\t", "Adiyaman\t", "Agadir\t", "Agana\t", "Aguadilla\t", "Aguascalientes\t", "Ahe", "Ahmedabad\t", "Ajaccio", "Akita\t", "Akron", "Alamosa", "Albany", "Albany", "Albenga", "Albuquerque", "Albury", "Alexandria\t", "Alexandria\t", "Alexandria", "Alexandroupolis\t", "Alghero", "Algiers\t", "Alicante\t", "Alice Springs", "Alice Town", "Allentown", "Alliance", "Almaty\t", "Almeria\t", "Alor Setar", "Alpena", "Altenrhein", "Altoona", "Amarillo", "Amman\t", "Amsterdam\t", "Anahim Lake", "Anahim Lake", "Anchorage", "Ancona\t", "Andros Town\t", "Angeles City\t", "Angra do Heroismo", "Ankara\t", "Annaba\t", "Annecy\t", "Antalya\t", "Antananarivo\t", "Antofagasta\t", "Antwerp\t", "Aomori\t", "Aosta\t", "Appleton", "Ardabil\t", "Arequipa\t", "Argostoli", "Arica\t", "Arkhangelsk\t", "Armidale", "Arrecife", "Arusha\t", "Arviat", "Arvidsjaur", "Asheville", "Asmara\t", "Aspen", "Astana\t", "Asuncion\t", "Aswan\t", "Athens\t", "Athens", "Atlanta", "Atlantic City", "Auckland\t", "Augusta", "Augusta", "Austin", "Avarua", "Ayers Rock", "Bacolod\t", "Badajoz", "Baghdad\t", "Bagotville", "Bagotville", "Baie-Comeau", "Baie-Comeau", "Bakersfield", "Baku\t", "Baku\t", "Balaton\t", "Balephuil\t", "Balikpapan", "Ballina", "Balmaceda\t", "Baltimore", "Ban Me Thuot\t", "Bandar Seri Begawan\t", "Bangalore\t", "Bangda\t", "Bangkok\t", "Bangor", "Bangui\t", "Banjul\t", "Bar Harbor", "Barcelona\t", "Bardufoss\t", "Bari\t", "Barisal\t", "Barranquilla\t", "Barrow", "Basel\t", "Basseterre\t", "Bastia", "Bathurst", "Baton Rouge", "Bauru\t", "Beaumont", "Beauvais\t", "Beckley", "Bedford", "Beef Island, Tortola\t", "Beijing\t", "Beirut\t", "Belem\t", "Belfast\tNorthern", "Belfast\tNorthern ", "Belgrade\t", "Belize City\t", "Bellingham, WA", "Belo Horizonte\t", "Bemidji, MN", "Benbecula\t", "Benguela\t", "Bergen\t", "Berlin\t", "Berne\t", "Bethel, AK \t", "Bettles, AK \t", "Biak, Papua\t", "Biarritz\t", "Bilbao\t", "Billings, MT \t", "Billund\t", "Binghamton, NY ", "Bintulu, Sarawak\t", "Birmingham\t", "Birmingham, AL \t", "Bishkek\t", "Bismarck, ND \t", "Bissau\t", "Blantyre\t", "Blenheim\t", "Bloemfontein\t", "Bloomington, IL ", "Bloomington, IN \t", "Bluefield, WV \t", "Bodo\t", "Bogota\t", "Boise, ID \t", "Bologna\t", "Bolzano\t", "Bordeaux\t", "Borlange\t", "Boston, MA ", "Bozeman, MT \t", "Brasilia\t", "Bratislava\t", "Brazzaville\t", "Bremen\t", "Brest\t", "Bridgetown\t", "Brindisi\t", "Brisbane, Qld.\t", "Bristol\t", "Broken Hill, N.S.W.", "Brookings, SD \t", "Broome, W.A.\t", "Brownsville, TX ", "Brunswick, GA", "Brussels\t", "Bucharest\t", "Budapest\t", "Buenos Aires\t", "Buffalo, NY \t", "Bujumbura\t", "Bulawayo\t", "Bundaberg, Qld.\t", "Burbank, CA \t", "Buri Ram\t", "Burlington, IA \t", "Burlington, MA \t", "Burlington, VT ", "Busan, ", "Butte, MT ", "Butuan\t", "Bydgoszcz\t", "Caen\t", "Cagayan de Oro\t", "Cagliari, Sardinia", "Cairns, Qld.\t", "Cairo\t", "Calcutta\t", "Calgary, AB\t", "Calgary, AB \t", "Cali\t", "Calvi, Corsica\t", "Campbell River, ", "Campbell River,", "Campbeltown\t", "Campeche\t", "Canberra, A.C.T.", "Cancun\t", "Cap-aux-Meules, ", "Cap-aux-Meules, Magdalens Islands", "Cape Girardeau, MO ", "Cape Town\t", "Caracas\t", "Cardiff\t", "Carlsbad, ", "Cartagena\t", "Casablanca\t", "Casper, WY ", "Castlegar, BC\t", "Castlegar, BC \t", "Castries\t", "Catania", "Cayenne", "Cayman ", "Cebu\t", "Cedar Rapids, IA \t", "Ceduna, S.A.", "Champaign", "Changchun", "Changsha\t", "Chania, Crete\t", "Charleston, SC \t", "Charleston, WV \t", "Charleville, Qld.\t", "Charlotte Amalie, St. Thomas\t", "Charlotte, NC \t", "Charlottesville, VA \t", "Charlottetown, PEI\t", "Charlottetown, PEI ", "Chattanooga, TN \t", "Chengdu\t", "Chennai (Madras)\t", "Chetumal\t", "Cheyenne, WY ", "Chiang Mai\t", "Chiang Rai\t", "Chibougamau, PQ", "Chibougamau, PQ \t", "Chicago, IL \t", "Chicago, IL \t", "Chicago, IL \t", "Chico, CA \t", "Chihuahua\t", "Chios\t", "Chisinau\t", "Chongqing\t", "Christchurch\t", "Christiansted, ", "Churchill, MB\t", "Churchill, MB \t", "Cincinnati, OH \t", "Ciudad Bolivar\t", "Ciudad Del Carmen\t", "Ciudad del Este\t", "Ciudad Juarez\t", "Ciudad Obregon\t", "Ciudad Victoria\t", "Clarksburg, WV \t", "Clermont-Ferrand\t", "Cleveland, OH \t", "Clovis, NM \t", "Cockburn Town,", "Cody, WY ", "Coffs Harbour", "Colima\t", "College Station", "Cologne\t", "Colombo\t", "Colorado Springs", "Columbia", "Conakry\t", "Concepcion\t", "Connaught\t", "Coober Pedy, S.A.\t", "Copenhagen\t", "Copiapo\t", "Cordoba", "Cordova, AK", "Cork\t", "Corpus Christi", "Cotabato\t", "Cozumel\t", "Cranbrook, ", "Crotone\t", "Cubi Point Nas\t", "Culiacan\t", "Curitiba\t", "Cusco\t", "Da Nang\t", "Dakar\t", "Dalaman\t", "Dali City\t", "Dalian\t", "Dallas, TX \t", "Damascus\t", "Dangriga\t", "Dar es Salaam", "Darwin, N.T.\t", "Davao\t", "Dawadmi\t", "Dayong\t", "Dayton, OH \t", "Daytona Beach, FL ", "Deadmans Cay,", "Deboyne", "Decatur, IL \t", "Deer Lake, ", "Delhi\t", "Denpasar, Bali\t", "Denver, CO \t", "Des Moines, IA ", "Detroit, MI \t", "Detroit, MI \t", "Devils Lake, ND \t", "Devonport, Tas", "Dhahran\t", "Dhaka\t", "Dickinson, ND \t", "Dien-Bien-Phu\t", "Dillingham, AK", "Dipolog\t", "Djibouti\t", "Dnepropetrovsk\t", "Dodge City, KS \t", "Doha\t", "Doncaster\t", "Donetsk\t", "Dortmund\t", "Dothan, AL ", "Douala\t\t", "Dresden\t", "Dryden, ON\t", "Dryden, ON \t", "Du Bois, ", "Dubai\t", "Dubbo, N.S.W.\t", "Dublin\t", "Dubrovnik", "Dubuque, IA \t", "Duluth, MN ", "Dumaguete\t", "Dunedin\t", "Durango\t", "Durango, CO \t", "Durban\t", "Dushanbe\t", "Dusseldorf\t", "Dutch Harbor, Un Island, AK", "East London\t", "East Midlands\t", "Eau Claire, WI ", "Edinburgh\t", "Edmonton, AB\t", "Eek, AK \t", "Ekaterinburg, ", "El Calafate\t", "El Centro, CA \t", "El Dorado, AR \t", "El Paso, TX \t", "El Salvador\t", "Elko, NV \t", "Elmira, NY \t", "Emerald, Qld.", "Enid, OK \t", "Entebbe\t", "Erfurt\t", "Erie, PA \t", "Esbjerg\t", "Escanaba, MI ", "Eugene, OR \t", "Eureka, CA\t", "Evansville, IN \t", "Evenes\t", "Fairbanks, AK \t", "Fargo, ND \t", "Farmington, NM ", "Faro\t", "Fayetteville, AR \t", "Fayetteville, NC \t", "Fernando de Noronha", "Figari, Corsica\t", "Flagstaff, AZ \t", "Flin Flon, ", "Flin Flon,", "Flint, MI \t", "Florence\t", "Florence, SC \t", "Flores\t", "Fort Dodge, IA \t", "Fort Lauderdale, FL \t", "Fort Leonard Wood, MO", "Fort McMurray, AB", "Fort McMurray, AB \t", "Fort Myers, FL \t", "Fort Nelson, BC\t", "Fort Nelson, BC \t", "Fort Saint John, BC\t", "Fort Saint John, BC \t", "Fort Smith, AR \t", "Fort Smith, ", "Fort Walton Beach, FL ", "Fort Wayne", "Fort Yukon", "Fort-de-France\t", "Frankfurt\t", "Fredericton, NB\t", "Fredericton, NB \t", "Freeport, ", "Freetown\t", "Fresno, CA \t", "Friedrichshafen\t", "Fukuoka\t", "Fukushima\t", "Funchal\t", "Fuzhou\t", "Gainesville, FL \t", "Gander, NF\t", "Gander, NF ", "Garden City, KS\t", "Gaspe, PQ\t", "Gaspe, PQ \t", "Gdansk\t", "General Santos\t", "Geneva\t", "Genoa\t", "George Town", "Georgetown\t", "Georgetown, ", "Gillette, WY \t", "Gisborne\t", "Gladstone, Qld.", "Glasgow\t", "Glasgow\t", "Glendive, MT \t", "Gold Coast, Qld.\t", "Gothenburg\t", "Gove, N.T.\t", "Governor's Harbour, Eleuthera Island\t", "Granada\t", "Grand Forks, ND \t", "Grand Island, NE \t", "Grand Junction, CO \t", "Grand Rapids, MI \t", "Grande Prairie, AB\t", "Grande Prairie, AB ", "Graz\t", "Great Bend, KS ", "Great Falls, MT \t", "Green Bay, WI ", "Greenbrier, WV\t", "Greensboro, NC \t", "Greenville, MS ", "Greenville, NC \t", "Griffith, N.S.W.\t", "Guadalajara", "Guangzhou\t", "Guatemala City\t", "Guayaquil\t", "Guaymas\t", "Guernsey\t", "Guilin\t", "Gulfport, MS \t", "Gunnison, CO \t", "Gustavia\t", "Hagerstown, ", "Haikou, ", "Hailar\t", "Hakodate\t", "Halifax, NS\t", "Halifax, NS \t", "Halmstad\t", "Hamburg\t", "Hamilton\t", "Hamilton\t", "Hamilton Island", "Hamilton, ON\t", "Hamilton, ON \t", "Hammerfest\t", "Hana, Maui, HI\t", "Hancock, MI \t", "Hanga Roa, Easter Island\t", "Hangzhou\t", "Hannover\t", "Hanoi\t", "Harare\t", "Harbin\t", "Harlingen, TX \t", "Harrisburg, PA \t", "Harrison, AR \t", "Hartford, CT \t", "Hat Yai\t", "Haugesund\t", "Havana\t", "Havre, MT ", "Hays, KS\t", "Hefei\t", "Helena, MT \t", "Helsingborg\t", "Helsinki\t", "Hemavan\t", "Hengchun", "Heraklion, Crete\t", "Hermosillo\t", "Hibbing, MN \t", "Hilo, Hawaii \t", "Hilton Head Island, SC ", "Ho Chi Minh City (Saigon)", "Hobart, Tas.\t", "Hobbs, NM \t", "Hof\t", "Hohhot\t", "Hokitika\t", "Homer, AK\t", "Hong Kong\t", "Honiara, Guadalcanal\t", "Honolulu, ", "Hoolehua, ", "Horn Island, ", "Hot Springs, ", "Houmt Souk\t", "Houston, TX ", "Hue\t", "Humberside\t", "Huntington, WV \t", "Huntsville, AL ", "Hurghada\t", "Huron, SD\t", "Hyannis, MA \t", "Hyderabad\t", "Ibadan\t", "Ibiza\t", "Ikaria Island\t", "Iloilo\t", "Indianapolis", "Innsbruck\t", "International Falls", "Invercargill\t", "Inverness\t", "Inyokern, CA ", "Ioannina\t", "Ipoh\t", "Iqaluit, Nunavut\t", "Iqaluit, Nunavut \t", "Irkutsk, Siberia\t", "Iron Mountain, MI \t", "Ironwood, MI\t", "Islamabad-Rawalpindi", "Islay Island\t", "Islip, NY \t", "Istanbul\t", "Istanbul\t", "Ithaca, NY \t", "Ivalo\t", "Iwami\t", "Ixtapa\t", "Izmir\t", "Izumo\t", "Jackson Hole, WY ", "Jackson, MS ", "Jackson, TN ", "Jacksonville, FL \t", "Jacksonville, NC ", "Jakarta, Java\t", "Jakarta, Java\t", "Jalapa\t", "Jamestown,", "Jamestown,", "Jeddah\t", "Jeju, ", "Jerez de La Frontera\t", "Jersey\t", "Jiamusi\t", "Jijiga\t", "Joensuu\t", "Johannesburg\t", "Johnstown, PA", "Johor Bahru\t", "Jonesboro, AR ", "Jonkoping\t", "Joplin, MO", "Juneau, AK ", "Jyvaskyla\t", "Kabul\t", "Kagoshima\t", "Kahului, Maui, HI \t", "Kailua-Kona,", "Kaitaia\t", "Kajaani\t", "Kalamazoo, ", "Kalaupapa, Molokai", "Kalgoorlie, W.A.", "Kalibo", "Kaliningrad\t", "Kalispell, MT \t", "Kalmar\t", "Kamloops, BC", "Kamloops", "Kamuela", "Kansas City", "Kaohsiung\t", "Kapalua", "Karachi", "Karaganda\t", "Karlstad\t", "Karratha", "Karup\t", "Kashi", "Kathmandu\t", "Katowice\t", "Kearney", "Kelowna", "Kenai,", "Kenora, ON \t", "Kerikeri\t", "Ketchikan, AK ", "Key West, FL \t", "Kharkov\t", "Khartoum\t", "Khon Kaen\t", "Kiel\t", "Kiev\t", "Kigali\t", "Killeen", "King Salmon", "Kingman", "Kingscote", "Kingstow", "Kinshasa\t", "Kirksville, MO \t", "Kirkwall, Orkney Islands\t", "Kiruna\t", "Kisangani\t", "Kittila\t", "Klagenfurt\t", "Klamath Falls, OR ", "Kodiak, AK ", "Koh Samui\t", "Komatsu\t", "Koror", "Kos\t", "Kosrae", "Kota ", "Krabi\t", "Krakow\t", "Kralendijk\t", "Kramfors", "Kristiansand\t", "Kristianstad\t", "Kuala Lumpur\t", "Kuala Terengganu", "Kuantan\t", "Kuching, ", "Kumamoto\t", "Kunming\t", "Kuopio\t", "Kushiro\t", "Kuwait\t", "Kzyl Orda\t", "La Coruna\t", "La Crosse, WI ", "La Paz\t", "La Paz\t", "La Romana\t", "La Serena\t", "Lafayette,", "Lagos\t", "Lahad Datu", "Lahore\t", "Lake Charles, LA ", "Lake Havasu City", "Lamezia Terme\t", "Lanai City,", "Lancaster, PA ", "Langkawi\t", "Lannion", "Lansing, MI \t", "Lanzhou\t", "Laramie, WY \t", "Laredo, TX \t", "Larnaca\t", "Las Cruces, NM \t", "Las Palmas", "Las Vegas, NV \t", "Latrobe, PA \t", "Launceston, Tas.\t", "Laurel, MS ", "Lawton, OK \t", "Lazaro Cardenas", "Le Havre\t", "Lebanon", "Leeds\t", "Legaspi\t", "Leipzig\t", "Leon\t", "Leon\t", "Lerwick", "Lethbridge", "Lewiston, ", "Lexington", "Lhasa", "Liberal", "Libreville\t", "Lihue", "Lille\t", "Lilongwe\t", "Limoges", "Lincang\t", "Lincoln, ", "Linkoping\t", "Linz\t", "Lisbon\t", "Little Rock,", "Liverpool\t", "Ljubljana\t", "Logrono\t", "Lome\t", "London\t", "Londonderry\t", "Long Banga\t", "Long Beach, ", "Longreach, ", "Longview, ", "Longyearbyen", "Loreto\t", "Lorient\t", "Los Angeles", "Los Cabos\t", "Louisville", "Lourdes\t", "Luanda\t", "Lubbock ", "Lubumbashi\t", "Lugano\t", "Lugansk\t", "Lukla\t", "Lulea\t", "Lusaka", "Luton\t", "Luxembourg\t", "Luxor\t", "Lycksele\t", "Lynchburg, VA ", "Lyon\t", "Mackay, Qld.\t", "Macon, ", "Madison,", "Madrid\t", "Mae Hong Son\t", "Magdalens Islands\t", "Mahebourg\t", "Majuro\t", "Mala Mala\t", "Malabo, ", "Malaga\t", "Male\t", "Malmo\t", "Malmo\t", "Managua\t", "Manama\t", "Manaus\t", "Manchester\t", "Manchester, NH ", "Mangrove Cay, ", "Manhattan, KS ", "Manila\t", "Manistee, MI ", "Manzanillo\t", "Manzini", "Mao, Minorca\t", "Maputo\t", "Maracaibo\t", "Mariehamn,", "Marilia\t", "Marion, ", "Mariupol\t", "Maroochydore,", "Marquette,", "Marrakech", "Marseille\t", "Marsh Harbour", "Martha's Vineyard,", "Maseru\t", "Mason City,", "Massena, ", "Matsu\t", "Matsuyama\t", "Mazatlan\t", "McAllen, ", "McCook, ", "Medan, ", "Medellin\t", "Medicine ", "Melbourne", "Melilla\t", "Memanbetsu\t", "Memphis, TN \t", "Mendoza\t", "Merida\t", "Meridian, MS \t", "Merimbula, N.S.W.\t", "Metz\t", "Mexicali\t", "Mexico City", "Miami, FL \t", "Mian Yang\t", "Midland", "Mikonos\t", "Milan\t", "Mildura, Vic.\t", "Miles City", "Milwaukee", "Minneapolis", "Minot", "Minsk\t", "Miri, ", "Misawa\t", "Missoula", "Miyazaki\t", "Mobile", "Modesto", "Mogadishu\t", "Moline", "Mombasa\t", "Monastir\t", "Monclova\t", "Moncton", "Monroe", "Monrovia\t", "Mont-Joli", "Montego Bay\t", "Monterey", "Monterrey\t", "Montevideo\t", "Montgomery", "Montpellier\t", "Montreal", "Mora\t", "Moree", "Morelia\t", "Morgantown", "Moroni\t", "Moruya", "Moscow", "Moscow", "Moscow\t", "Moses Lake", "Mount Gambier", "Mount Isa", "Mudanjiang\t", "Mulhouse\t", "Mulhouse\t", "Mulu\t", "Mumbai", "Munich\t", "Munster\t", "Murcia\t", "Murmansk\t", "Muscat\t", "Muscle Shoals", "Muskegon", "Myrtle Beach", "Mytilene", "N'Djamena", "Nadi\t", "Nador\t", "Nagasaki", "Nagoya", "Nagoya\t", "Naha", "Nairobi\t", "Nakhon Si Thammarat\t", "Nanaimo", "Nanaimo", "Nanchang\t", "Nangen\t", "Nanjing\t", "Nanki ", "Nanning", "Nantes\t", "Nantucket", "Napier\t", "Naples", "Naples", "Narrabri", "Narrandera", "Narvik\t", "Naryan Mar", "Nashville", "Nassau\t", "Naze", "Nelson\t", "Nelspruit\t", "New Bern", "New Haven", "New Orleans", "New York", "Newark", "Newburgh", "Newcastle", "Newman, W.A.\t", "Newport News", "Niamey\t", "Nice\t", "Niigata\t", "Ningbo\t", "Nizhniy Novgorod\t", "Nome, AK " }));
        TTFM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TTFMActionPerformed(evt);
            }
        });

        FTF.setBackground(new java.awt.Color(255, 255, 255));
        FTF.setEditable(true);
        FTF.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        FTF.setForeground(new java.awt.Color(0, 0, 0));
        FTF.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Aalborg\t", "Aalesund\t", "Aarhus\t", "Abbotsford", "Aberdeen \t", "Abidjan\t", "Abilene", "Abu Dhabi\t", "Abuja\t", "Acapulco\t", "Accra\t", "Adana\t", "Addis Ababa\t", "Adelaide", "Aden\t", "Adiyaman\t", "Agadir\t", "Agana\t", "Aguadilla\t", "Aguascalientes\t", "Ahe", "Ahmedabad\t", "Ajaccio", "Akita\t", "Akron", "Alamosa", "Albany", "Albany", "Albenga", "Albuquerque", "Albury", "Alexandria\t", "Alexandria\t", "Alexandria", "Alexandroupolis\t", "Alghero", "Algiers\t", "Alicante\t", "Alice Springs", "Alice Town", "Allentown", "Alliance", "Almaty\t", "Almeria\t", "Alor Setar", "Alpena", "Altenrhein", "Altoona", "Amarillo", "Amman\t", "Amsterdam\t", "Anahim Lake", "Anahim Lake", "Anchorage", "Ancona\t", "Andros Town\t", "Angeles City\t", "Angra do Heroismo", "Ankara\t", "Annaba\t", "Annecy\t", "Antalya\t", "Antananarivo\t", "Antofagasta\t", "Antwerp\t", "Aomori\t", "Aosta\t", "Appleton", "Ardabil\t", "Arequipa\t", "Argostoli", "Arica\t", "Arkhangelsk\t", "Armidale", "Arrecife", "Arusha\t", "Arviat", "Arvidsjaur", "Asheville", "Asmara\t", "Aspen", "Astana\t", "Asuncion\t", "Aswan\t", "Athens\t", "Athens", "Atlanta", "Atlantic City", "Auckland\t", "Augusta", "Augusta", "Austin", "Avarua", "Ayers Rock", "Bacolod\t", "Badajoz", "Baghdad\t", "Bagotville", "Bagotville", "Baie-Comeau", "Baie-Comeau", "Bakersfield", "Baku\t", "Baku\t", "Balaton\t", "Balephuil\t", "Balikpapan", "Ballina", "Balmaceda\t", "Baltimore", "Ban Me Thuot\t", "Bandar Seri Begawan\t", "Bangalore\t", "Bangda\t", "Bangkok\t", "Bangor", "Bangui\t", "Banjul\t", "Bar Harbor", "Barcelona\t", "Bardufoss\t", "Bari\t", "Barisal\t", "Barranquilla\t", "Barrow", "Basel\t", "Basseterre\t", "Bastia", "Bathurst", "Baton Rouge", "Bauru\t", "Beaumont", "Beauvais\t", "Beckley", "Bedford", "Beef Island, Tortola\t", "Beijing\t", "Beirut\t", "Belem\t", "Belfast\tNorthern", "Belfast\tNorthern ", "Belgrade\t", "Belize City\t", "Bellingham, WA", "Belo Horizonte\t", "Bemidji, MN", "Benbecula\t", "Benguela\t", "Bergen\t", "Berlin\t", "Berne\t", "Bethel, AK \t", "Bettles, AK \t", "Biak, Papua\t", "Biarritz\t", "Bilbao\t", "Billings, MT \t", "Billund\t", "Binghamton, NY ", "Bintulu, Sarawak\t", "Birmingham\t", "Birmingham, AL \t", "Bishkek\t", "Bismarck, ND \t", "Bissau\t", "Blantyre\t", "Blenheim\t", "Bloemfontein\t", "Bloomington, IL ", "Bloomington, IN \t", "Bluefield, WV \t", "Bodo\t", "Bogota\t", "Boise, ID \t", "Bologna\t", "Bolzano\t", "Bordeaux\t", "Borlange\t", "Boston, MA ", "Bozeman, MT \t", "Brasilia\t", "Bratislava\t", "Brazzaville\t", "Bremen\t", "Brest\t", "Bridgetown\t", "Brindisi\t", "Brisbane, Qld.\t", "Bristol\t", "Broken Hill, N.S.W.", "Brookings, SD \t", "Broome, W.A.\t", "Brownsville, TX ", "Brunswick, GA", "Brussels\t", "Bucharest\t", "Budapest\t", "Buenos Aires\t", "Buffalo, NY \t", "Bujumbura\t", "Bulawayo\t", "Bundaberg, Qld.\t", "Burbank, CA \t", "Buri Ram\t", "Burlington, IA \t", "Burlington, MA \t", "Burlington, VT ", "Busan, ", "Butte, MT ", "Butuan\t", "Bydgoszcz\t", "Caen\t", "Cagayan de Oro\t", "Cagliari, Sardinia", "Cairns, Qld.\t", "Cairo\t", "Calcutta\t", "Calgary, AB\t", "Calgary, AB \t", "Cali\t", "Calvi, Corsica\t", "Campbell River, ", "Campbell River,", "Campbeltown\t", "Campeche\t", "Canberra, A.C.T.", "Cancun\t", "Cap-aux-Meules, ", "Cap-aux-Meules, Magdalens Islands", "Cape Girardeau, MO ", "Cape Town\t", "Caracas\t", "Cardiff\t", "Carlsbad, ", "Cartagena\t", "Casablanca\t", "Casper, WY ", "Castlegar, BC\t", "Castlegar, BC \t", "Castries\t", "Catania", "Cayenne", "Cayman ", "Cebu\t", "Cedar Rapids, IA \t", "Ceduna, S.A.", "Champaign", "Changchun", "Changsha\t", "Chania, Crete\t", "Charleston, SC \t", "Charleston, WV \t", "Charleville, Qld.\t", "Charlotte Amalie, St. Thomas\t", "Charlotte, NC \t", "Charlottesville, VA \t", "Charlottetown, PEI\t", "Charlottetown, PEI ", "Chattanooga, TN \t", "Chengdu\t", "Chennai (Madras)\t", "Chetumal\t", "Cheyenne, WY ", "Chiang Mai\t", "Chiang Rai\t", "Chibougamau, PQ", "Chibougamau, PQ \t", "Chicago, IL \t", "Chicago, IL \t", "Chicago, IL \t", "Chico, CA \t", "Chihuahua\t", "Chios\t", "Chisinau\t", "Chongqing\t", "Christchurch\t", "Christiansted, ", "Churchill, MB\t", "Churchill, MB \t", "Cincinnati, OH \t", "Ciudad Bolivar\t", "Ciudad Del Carmen\t", "Ciudad del Este\t", "Ciudad Juarez\t", "Ciudad Obregon\t", "Ciudad Victoria\t", "Clarksburg, WV \t", "Clermont-Ferrand\t", "Cleveland, OH \t", "Clovis, NM \t", "Cockburn Town,", "Cody, WY ", "Coffs Harbour", "Colima\t", "College Station", "Cologne\t", "Colombo\t", "Colorado Springs", "Columbia", "Conakry\t", "Concepcion\t", "Connaught\t", "Coober Pedy, S.A.\t", "Copenhagen\t", "Copiapo\t", "Cordoba", "Cordova, AK", "Cork\t", "Corpus Christi", "Cotabato\t", "Cozumel\t", "Cranbrook, ", "Crotone\t", "Cubi Point Nas\t", "Culiacan\t", "Curitiba\t", "Cusco\t", "Da Nang\t", "Dakar\t", "Dalaman\t", "Dali City\t", "Dalian\t", "Dallas, TX \t", "Damascus\t", "Dangriga\t", "Dar es Salaam", "Darwin, N.T.\t", "Davao\t", "Dawadmi\t", "Dayong\t", "Dayton, OH \t", "Daytona Beach, FL ", "Deadmans Cay,", "Deboyne", "Decatur, IL \t", "Deer Lake, ", "Delhi\t", "Denpasar, Bali\t", "Denver, CO \t", "Des Moines, IA ", "Detroit, MI \t", "Detroit, MI \t", "Devils Lake, ND \t", "Devonport, Tas", "Dhahran\t", "Dhaka\t", "Dickinson, ND \t", "Dien-Bien-Phu\t", "Dillingham, AK", "Dipolog\t", "Djibouti\t", "Dnepropetrovsk\t", "Dodge City, KS \t", "Doha\t", "Doncaster\t", "Donetsk\t", "Dortmund\t", "Dothan, AL ", "Douala\t\t", "Dresden\t", "Dryden, ON\t", "Dryden, ON \t", "Du Bois, ", "Dubai\t", "Dubbo, N.S.W.\t", "Dublin\t", "Dubrovnik", "Dubuque, IA \t", "Duluth, MN ", "Dumaguete\t", "Dunedin\t", "Durango\t", "Durango, CO \t", "Durban\t", "Dushanbe\t", "Dusseldorf\t", "Dutch Harbor, Un Island, AK", "East London\t", "East Midlands\t", "Eau Claire, WI ", "Edinburgh\t", "Edmonton, AB\t", "Eek, AK \t", "Ekaterinburg, ", "El Calafate\t", "El Centro, CA \t", "El Dorado, AR \t", "El Paso, TX \t", "El Salvador\t", "Elko, NV \t", "Elmira, NY \t", "Emerald, Qld.", "Enid, OK \t", "Entebbe\t", "Erfurt\t", "Erie, PA \t", "Esbjerg\t", "Escanaba, MI ", "Eugene, OR \t", "Eureka, CA\t", "Evansville, IN \t", "Evenes\t", "Fairbanks, AK \t", "Fargo, ND \t", "Farmington, NM ", "Faro\t", "Fayetteville, AR \t", "Fayetteville, NC \t", "Fernando de Noronha", "Figari, Corsica\t", "Flagstaff, AZ \t", "Flin Flon, ", "Flin Flon,", "Flint, MI \t", "Florence\t", "Florence, SC \t", "Flores\t", "Fort Dodge, IA \t", "Fort Lauderdale, FL \t", "Fort Leonard Wood, MO", "Fort McMurray, AB", "Fort McMurray, AB \t", "Fort Myers, FL \t", "Fort Nelson, BC\t", "Fort Nelson, BC \t", "Fort Saint John, BC\t", "Fort Saint John, BC \t", "Fort Smith, AR \t", "Fort Smith, ", "Fort Walton Beach, FL ", "Fort Wayne", "Fort Yukon", "Fort-de-France\t", "Frankfurt\t", "Fredericton, NB\t", "Fredericton, NB \t", "Freeport, ", "Freetown\t", "Fresno, CA \t", "Friedrichshafen\t", "Fukuoka\t", "Fukushima\t", "Funchal\t", "Fuzhou\t", "Gainesville, FL \t", "Gander, NF\t", "Gander, NF ", "Garden City, KS\t", "Gaspe, PQ\t", "Gaspe, PQ \t", "Gdansk\t", "General Santos\t", "Geneva\t", "Genoa\t", "George Town", "Georgetown\t", "Georgetown, ", "Gillette, WY \t", "Gisborne\t", "Gladstone, Qld.", "Glasgow\t", "Glasgow\t", "Glendive, MT \t", "Gold Coast, Qld.\t", "Gothenburg\t", "Gove, N.T.\t", "Governor's Harbour, Eleuthera Island\t", "Granada\t", "Grand Forks, ND \t", "Grand Island, NE \t", "Grand Junction, CO \t", "Grand Rapids, MI \t", "Grande Prairie, AB\t", "Grande Prairie, AB ", "Graz\t", "Great Bend, KS ", "Great Falls, MT \t", "Green Bay, WI ", "Greenbrier, WV\t", "Greensboro, NC \t", "Greenville, MS ", "Greenville, NC \t", "Griffith, N.S.W.\t", "Guadalajara", "Guangzhou\t", "Guatemala City\t", "Guayaquil\t", "Guaymas\t", "Guernsey\t", "Guilin\t", "Gulfport, MS \t", "Gunnison, CO \t", "Gustavia\t", "Hagerstown, ", "Haikou, ", "Hailar\t", "Hakodate\t", "Halifax, NS\t", "Halifax, NS \t", "Halmstad\t", "Hamburg\t", "Hamilton\t", "Hamilton\t", "Hamilton Island", "Hamilton, ON\t", "Hamilton, ON \t", "Hammerfest\t", "Hana, Maui, HI\t", "Hancock, MI \t", "Hanga Roa, Easter Island\t", "Hangzhou\t", "Hannover\t", "Hanoi\t", "Harare\t", "Harbin\t", "Harlingen, TX \t", "Harrisburg, PA \t", "Harrison, AR \t", "Hartford, CT \t", "Hat Yai\t", "Haugesund\t", "Havana\t", "Havre, MT ", "Hays, KS\t", "Hefei\t", "Helena, MT \t", "Helsingborg\t", "Helsinki\t", "Hemavan\t", "Hengchun", "Heraklion, Crete\t", "Hermosillo\t", "Hibbing, MN \t", "Hilo, Hawaii \t", "Hilton Head Island, SC ", "Ho Chi Minh City (Saigon)", "Hobart, Tas.\t", "Hobbs, NM \t", "Hof\t", "Hohhot\t", "Hokitika\t", "Homer, AK\t", "Hong Kong\t", "Honiara, Guadalcanal\t", "Honolulu, ", "Hoolehua, ", "Horn Island, ", "Hot Springs, ", "Houmt Souk\t", "Houston, TX ", "Hue\t", "Humberside\t", "Huntington, WV \t", "Huntsville, AL ", "Hurghada\t", "Huron, SD\t", "Hyannis, MA \t", "Hyderabad\t", "Ibadan\t", "Ibiza\t", "Ikaria Island\t", "Iloilo\t", "Indianapolis", "Innsbruck\t", "International Falls", "Invercargill\t", "Inverness\t", "Inyokern, CA ", "Ioannina\t", "Ipoh\t", "Iqaluit, Nunavut\t", "Iqaluit, Nunavut \t", "Irkutsk, Siberia\t", "Iron Mountain, MI \t", "Ironwood, MI\t", "Islamabad-Rawalpindi", "Islay Island\t", "Islip, NY \t", "Istanbul\t", "Istanbul\t", "Ithaca, NY \t", "Ivalo\t", "Iwami\t", "Ixtapa\t", "Izmir\t", "Izumo\t", "Jackson Hole, WY ", "Jackson, MS ", "Jackson, TN ", "Jacksonville, FL \t", "Jacksonville, NC ", "Jakarta, Java\t", "Jakarta, Java\t", "Jalapa\t", "Jamestown,", "Jamestown,", "Jeddah\t", "Jeju, ", "Jerez de La Frontera\t", "Jersey\t", "Jiamusi\t", "Jijiga\t", "Joensuu\t", "Johannesburg\t", "Johnstown, PA", "Johor Bahru\t", "Jonesboro, AR ", "Jonkoping\t", "Joplin, MO", "Juneau, AK ", "Jyvaskyla\t", "Kabul\t", "Kagoshima\t", "Kahului, Maui, HI \t", "Kailua-Kona,", "Kaitaia\t", "Kajaani\t", "Kalamazoo, ", "Kalaupapa, Molokai", "Kalgoorlie, W.A.", "Kalibo", "Kaliningrad\t", "Kalispell, MT \t", "Kalmar\t", "Kamloops, BC", "Kamloops", "Kamuela", "Kansas City", "Kaohsiung\t", "Kapalua", "Karachi", "Karaganda\t", "Karlstad\t", "Karratha", "Karup\t", "Kashi", "Kathmandu\t", "Katowice\t", "Kearney", "Kelowna", "Kenai,", "Kenora, ON \t", "Kerikeri\t", "Ketchikan, AK ", "Key West, FL \t", "Kharkov\t", "Khartoum\t", "Khon Kaen\t", "Kiel\t", "Kiev\t", "Kigali\t", "Killeen", "King Salmon", "Kingman", "Kingscote", "Kingstow", "Kinshasa\t", "Kirksville, MO \t", "Kirkwall, Orkney Islands\t", "Kiruna\t", "Kisangani\t", "Kittila\t", "Klagenfurt\t", "Klamath Falls, OR ", "Kodiak, AK ", "Koh Samui\t", "Komatsu\t", "Koror", "Kos\t", "Kosrae", "Kota ", "Krabi\t", "Krakow\t", "Kralendijk\t", "Kramfors", "Kristiansand\t", "Kristianstad\t", "Kuala Lumpur\t", "Kuala Terengganu", "Kuantan\t", "Kuching, ", "Kumamoto\t", "Kunming\t", "Kuopio\t", "Kushiro\t", "Kuwait\t", "Kzyl Orda\t", "La Coruna\t", "La Crosse, WI ", "La Paz\t", "La Paz\t", "La Romana\t", "La Serena\t", "Lafayette,", "Lagos\t", "Lahad Datu", "Lahore\t", "Lake Charles, LA ", "Lake Havasu City", "Lamezia Terme\t", "Lanai City,", "Lancaster, PA ", "Langkawi\t", "Lannion", "Lansing, MI \t", "Lanzhou\t", "Laramie, WY \t", "Laredo, TX \t", "Larnaca\t", "Las Cruces, NM \t", "Las Palmas", "Las Vegas, NV \t", "Latrobe, PA \t", "Launceston, Tas.\t", "Laurel, MS ", "Lawton, OK \t", "Lazaro Cardenas", "Le Havre\t", "Lebanon", "Leeds\t", "Legaspi\t", "Leipzig\t", "Leon\t", "Leon\t", "Lerwick", "Lethbridge", "Lewiston, ", "Lexington", "Lhasa", "Liberal", "Libreville\t", "Lihue", "Lille\t", "Lilongwe\t", "Limoges", "Lincang\t", "Lincoln, ", "Linkoping\t", "Linz\t", "Lisbon\t", "Little Rock,", "Liverpool\t", "Ljubljana\t", "Logrono\t", "Lome\t", "London\t", "Londonderry\t", "Long Banga\t", "Long Beach, ", "Longreach, ", "Longview, ", "Longyearbyen", "Loreto\t", "Lorient\t", "Los Angeles", "Los Cabos\t", "Louisville", "Lourdes\t", "Luanda\t", "Lubbock ", "Lubumbashi\t", "Lugano\t", "Lugansk\t", "Lukla\t", "Lulea\t", "Lusaka", "Luton\t", "Luxembourg\t", "Luxor\t", "Lycksele\t", "Lynchburg, VA ", "Lyon\t", "Mackay, Qld.\t", "Macon, ", "Madison,", "Madrid\t", "Mae Hong Son\t", "Magdalens Islands\t", "Mahebourg\t", "Majuro\t", "Mala Mala\t", "Malabo, ", "Malaga\t", "Male\t", "Malmo\t", "Malmo\t", "Managua\t", "Manama\t", "Manaus\t", "Manchester\t", "Manchester, NH ", "Mangrove Cay, ", "Manhattan, KS ", "Manila\t", "Manistee, MI ", "Manzanillo\t", "Manzini", "Mao, Minorca\t", "Maputo\t", "Maracaibo\t", "Mariehamn,", "Marilia\t", "Marion, ", "Mariupol\t", "Maroochydore,", "Marquette,", "Marrakech", "Marseille\t", "Marsh Harbour", "Martha's Vineyard,", "Maseru\t", "Mason City,", "Massena, ", "Matsu\t", "Matsuyama\t", "Mazatlan\t", "McAllen, ", "McCook, ", "Medan, ", "Medellin\t", "Medicine ", "Melbourne", "Melilla\t", "Memanbetsu\t", "Memphis, TN \t", "Mendoza\t", "Merida\t", "Meridian, MS \t", "Merimbula, N.S.W.\t", "Metz\t", "Mexicali\t", "Mexico City", "Miami, FL \t", "Mian Yang\t", "Midland", "Mikonos\t", "Milan\t", "Mildura, Vic.\t", "Miles City", "Milwaukee", "Minneapolis", "Minot", "Minsk\t", "Miri, ", "Misawa\t", "Missoula", "Miyazaki\t", "Mobile", "Modesto", "Mogadishu\t", "Moline", "Mombasa\t", "Monastir\t", "Monclova\t", "Moncton", "Monroe", "Monrovia\t", "Mont-Joli", "Montego Bay\t", "Monterey", "Monterrey\t", "Montevideo\t", "Montgomery", "Montpellier\t", "Montreal", "Mora\t", "Moree", "Morelia\t", "Morgantown", "Moroni\t", "Moruya", "Moscow", "Moscow", "Moscow\t", "Moses Lake", "Mount Gambier", "Mount Isa", "Mudanjiang\t", "Mulhouse\t", "Mulhouse\t", "Mulu\t", "Mumbai", "Munich\t", "Munster\t", "Murcia\t", "Murmansk\t", "Muscat\t", "Muscle Shoals", "Muskegon", "Myrtle Beach", "Mytilene", "N'Djamena", "Nadi\t", "Nador\t", "Nagasaki", "Nagoya", "Nagoya\t", "Naha", "Nairobi\t", "Nakhon Si Thammarat\t", "Nanaimo", "Nanaimo", "Nanchang\t", "Nangen\t", "Nanjing\t", "Nanki ", "Nanning", "Nantes\t", "Nantucket", "Napier\t", "Naples", "Naples", "Narrabri", "Narrandera", "Narvik\t", "Naryan Mar", "Nashville", "Nassau\t", "Naze", "Nelson\t", "Nelspruit\t", "New Bern", "New Haven", "New Orleans", "New York", "Newark", "Newburgh", "Newcastle", "Newman, W.A.\t", "Newport News", "Niamey\t", "Nice\t", "Niigata\t", "Ningbo\t", "Nizhniy Novgorod\t", "Nome, AK " }));
        FTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FTFActionPerformed(evt);
            }
        });

        Dep.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        Return.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        DepM.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        ConfirmPass.setBackground(new java.awt.Color(74, 31, 61));
        ConfirmPass.setForeground(new java.awt.Color(255, 255, 255));
        ConfirmPass.setText("Confirm");
        ConfirmPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmPassActionPerformed(evt);
            }
        });

        area.setEditable(false);
        area.setColumns(20);
        area.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        area.setRows(5);
        jScrollPane1.setViewportView(area);

        Print.setBackground(new java.awt.Color(74, 31, 61));
        Print.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Print.setForeground(new java.awt.Color(255, 255, 255));
        Print.setText("Print Ticket");
        Print.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BookingPanelLayout = new javax.swing.GroupLayout(BookingPanel);
        BookingPanel.setLayout(BookingPanelLayout);
        BookingPanelLayout.setHorizontalGroup(
            BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BookingPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jSeparator1))
            .addGroup(BookingPanelLayout.createSequentialGroup()
                .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BookingPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(BookingPanelLayout.createSequentialGroup()
                                .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(BookingPanelLayout.createSequentialGroup()
                                        .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(From)
                                            .addGroup(BookingPanelLayout.createSequentialGroup()
                                                .addComponent(FTF, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, 0)
                                                .addComponent(Reverse)))
                                        .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(BookingPanelLayout.createSequentialGroup()
                                                .addComponent(To)
                                                .addGap(132, 132, 132))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BookingPanelLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(TTF, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                                    .addGroup(BookingPanelLayout.createSequentialGroup()
                                        .addComponent(TripCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(226, 226, 226)))
                                .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Dep, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Departure))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ReturnL)
                                    .addComponent(Return, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(Pass, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ConfirmPass))
                                .addGap(7, 7, 7)
                                .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cabin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)))))
                    .addGroup(BookingPanelLayout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Print)
                            .addGroup(BookingPanelLayout.createSequentialGroup()
                                .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(BookingPanelLayout.createSequentialGroup()
                                        .addComponent(FTFM, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, 0)
                                        .addComponent(ReverseM))
                                    .addComponent(FromM))
                                .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ToM)
                                    .addComponent(TTFM, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(6, 6, 6)
                        .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DepartureM)
                            .addComponent(DepM, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(BookingPanelLayout.createSequentialGroup()
                        .addGap(254, 254, 254)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        BookingPanelLayout.setVerticalGroup(
            BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BookingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(0, 0, 0)
                .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(BookingPanelLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(BookingPanelLayout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cabin, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Pass, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ReturnL)
                                .addComponent(jLabel7)
                                .addComponent(jLabel2)
                                .addComponent(Departure))))
                    .addComponent(Dep, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(BookingPanelLayout.createSequentialGroup()
                        .addComponent(TripCB, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(To)
                            .addComponent(From))
                        .addGap(0, 0, 0)
                        .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Return, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(Reverse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(TTF)
                                .addComponent(FTF)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ConfirmPass)
                .addGap(28, 28, 28)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ToM)
                        .addComponent(FromM))
                    .addComponent(DepartureM, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(0, 0, 0)
                .addGroup(BookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(FTFM)
                    .addComponent(TTFM, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ReverseM, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DepM, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Print, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Booking", BookingPanel);

        jPanel3.setBackground(new java.awt.Color(186, 79, 84));
        jPanel3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel3.setDoubleBuffered(false);

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Manage your upcoming trip");

        PN.setBackground(new java.awt.Color(255, 255, 255));
        PN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        PN.setForeground(new java.awt.Color(0, 0, 0));
        PN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PNActionPerformed(evt);
            }
        });

        FID.setBackground(new java.awt.Color(255, 255, 255));
        FID.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        FID.setForeground(new java.awt.Color(0, 0, 0));

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 0, 0));
        jLabel14.setText("Passport Num");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 0, 0));
        jLabel15.setText("Flight ID");

        Cancel.setBackground(new java.awt.Color(74, 31, 61));
        Cancel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Cancel.setForeground(new java.awt.Color(255, 255, 255));
        Cancel.setText("Cancel Booking");
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel13)
                .addGap(0, 630, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PN, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FID, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(320, 320, 320)
                        .addComponent(Cancel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel13)
                .addGap(85, 85, 85)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15))
                .addGap(2, 2, 2)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PN, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FID, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(431, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout ModifyPanelLayout = new javax.swing.GroupLayout(ModifyPanel);
        ModifyPanel.setLayout(ModifyPanelLayout);
        ModifyPanelLayout.setHorizontalGroup(
            ModifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        ModifyPanelLayout.setVerticalGroup(
            ModifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Modify", ModifyPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jTabbedPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jTabbedPane2))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        new login().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jLabel9MouseClicked


    private void DepMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DepMouseClicked
        // TODO add your handling code here:
        isDefault();
    }//GEN-LAST:event_DepMouseClicked

    private void PrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintActionPerformed
        jScrollPane1.setVisible(true);
        area.setVisible(true);
        printTicket();
        if ((TripCB.getSelectedItem().toString()).equals("One way")) {
            printTicket();

        } else if (!(TripCB.getSelectedItem().toString()).equals("One way"));
        {

            printTicket(TripCB.getSelectedItem().toString());

        }

    }//GEN-LAST:event_PrintActionPerformed

    private void ConfirmPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmPassActionPerformed
        File Passengers = new File("Passenger.txt");
        try {
            Scanner scanner = new Scanner(Passengers);
            while (scanner.hasNextLine()) {
                String data = scanner.nextLine();
                Pass.setText(data);
            }
            scanner.close();

        } catch (IOException e) {

        }
    }//GEN-LAST:event_ConfirmPassActionPerformed

    private void FTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FTFActionPerformed
        // TODO add your handling code here:
        isDefault();
    }//GEN-LAST:event_FTFActionPerformed

    private void TTFMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TTFMActionPerformed
        // TODO add your handling code here:
        isDefault();
    }//GEN-LAST:event_TTFMActionPerformed

    private void FTFMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FTFMActionPerformed
        // TODO add your handling code here:
        isDefault();
    }//GEN-LAST:event_FTFMActionPerformed

    private void TTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TTFActionPerformed
        // TODO add your handling code here:
        isDefault();
    }//GEN-LAST:event_TTFActionPerformed

    private void ReverseMMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReverseMMouseClicked
        String temp, From, To;
        From = FTFM.getSelectedItem().toString();
        To = TTFM.getSelectedItem().toString();
        if (!From.equals(To)) {
            temp = From;
            From = To;
            To = temp;
            FTFM.setSelectedItem(From);
            TTFM.setSelectedItem(To);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a different destination.");
        }
    }//GEN-LAST:event_ReverseMMouseClicked

    private void cabinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cabinActionPerformed
        // TODO add your handling code here:
        isDefault();
    }//GEN-LAST:event_cabinActionPerformed

    private void PassKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PassKeyPressed

    }//GEN-LAST:event_PassKeyPressed

    private void PassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PassActionPerformed
        isDefault();
    }//GEN-LAST:event_PassActionPerformed

    private void PassMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PassMouseExited

    }//GEN-LAST:event_PassMouseExited

    private void PassMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PassMouseEntered

    }//GEN-LAST:event_PassMouseEntered

    private void PassMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PassMouseClicked
        isDefault();
        new Passenger().setVisible(true);
        ConfirmPass.setVisible(true);
    }//GEN-LAST:event_PassMouseClicked

    private void PassFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PassFocusGained

    }//GEN-LAST:event_PassFocusGained

    private void TripCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TripCBActionPerformed
        // TODO add your handling code here:
        String var;
        var = TripCB.getSelectedItem().toString();
        if (var.equals("One way")) {
            setDefaultVisiblity();
            FTF.setVisible(true);
            TTF.setVisible(true);
            From.setVisible(true);
            To.setVisible(true);
            Reverse.setVisible(true);
            Dep.setVisible(true);
            Departure.setVisible(true);

        } else if (var.equals("Return")) {
            setDefaultVisiblity();
            FTF.setVisible(true);
            TTF.setVisible(true);
            From.setVisible(true);
            To.setVisible(true);
            Reverse.setVisible(true);
            Dep.setVisible(true);
            Departure.setVisible(true);
            Return.setVisible(true);
            ReturnL.setVisible(true);
        } else if (var.equals("Multi-city")) {
            setDefaultVisiblity();
            FTF.setVisible(true);
            TTF.setVisible(true);
            From.setVisible(true);
            To.setVisible(true);
            Reverse.setVisible(true);
            Dep.setVisible(true);
            Departure.setVisible(true);
            FTFM.setVisible(true);
            TTFM.setVisible(true);
            FromM.setVisible(true);
            ToM.setVisible(true);
            DepartureM.setVisible(true);
            DepM.setVisible(true);
            Reverse.setVisible(true);
        }
    }//GEN-LAST:event_TripCBActionPerformed

    private void ReverseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReverseMouseClicked
        String temp, From, To;
        From = FTF.getSelectedItem().toString();
        To = TTF.getSelectedItem().toString();
        if (!From.equals(To)) {
            temp = From;
            From = To;
            To = temp;
            FTF.setSelectedItem(From);
            TTF.setSelectedItem(To);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a different destination.");
        }
    }//GEN-LAST:event_ReverseMouseClicked

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed

        File UserDetails = new File("Ticket.txt");

        try {
            String FlightID = FID.getText();
            String PassNum = PN.getText();
            Scanner scanner = new Scanner(UserDetails);
            String line;

            String Email = null, FirstN = null, LastN = null;
            Boolean Found = false;

            while (scanner.hasNextLine() && !isBlank(line = scanner.nextLine())) {
                String[] accountData = line.split(",");
                String PN = accountData[0];
                String FID = accountData[1];
                String FN = accountData[2];
                String LN = accountData[3];
                String email = accountData[4];

                if (PassNum.equals(PN) && FlightID.equals(FID)) {
                    Found = true;
                    Email = email;
                    FirstN = FN;
                    LastN = LN;

                    FileWriter Writer = new FileWriter("TicketBooked.txt", false);
                    Writer.write("");
                    Writer.close();

                    FileWriter printer = new FileWriter("Ticket.txt", false);
                    printer.write("");
                    printer.close();

                }
            }

            if (Found == true) {
                JOptionPane.showMessageDialog(null, "Booking Cancelled !");
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "File not found");
        }

    }//GEN-LAST:event_CancelActionPerformed

    private void PNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PNActionPerformed
    private void isDefault() {
        String trip;
        trip = TripCB.getSelectedItem().toString();
        if (trip.equals("<Default>")) {
            JOptionPane.showMessageDialog(null, "Please choose a valid trip type first!");
        }
    }

    private void printTicket() {
        String username;
        String password;
        int FlightID = 0;
        String Email = null, FirstN = null, LastN = null, PassNum = null, CNIC = null;
        File CurrentUser = new File("CurrentUser.txt");
        try {
            Scanner scanner = new Scanner(CurrentUser);
            String line;

            while (scanner.hasNextLine() && !isBlank(line = scanner.nextLine())) {
                String[] accountData = line.split(",");
                String user = accountData[0];
                String pass = accountData[1];
                String email = accountData[2];
                String fn = accountData[3];
                String ln = accountData[4];
                String passno = accountData[5];
                String cnic = accountData[6];

                username = user;
                password = pass;
                Email = email;
                FirstN = fn;
                LastN = ln;
                PassNum = passno;
                CNIC = cnic;
                FlightID = (int) (Math.random() * 1000);

            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "File not found");
        }

        area.setText("*************************************************************\n");
        area.setText(area.getText() + "*                                      Booked Ticket                                   *\n");
        area.setText(area.getText() + "*************************************************************\n\n");
        area.setText(area.getText() + "Flight ID: " + Integer.toString(FlightID));
        area.setText(area.getText() + "\n\nFirst Name: " + FirstN);
        area.setText(area.getText() + "\n\nLast Name: " + LastN);
        area.setText(area.getText() + "\n\nPassport Number: " + PassNum);
        area.setText(area.getText() + "\n\nEmail: " + Email);
        area.setText(area.getText() + "\n\nDate of Departure: " + Dep.getDate());
        area.setText(area.getText() + "\n\nFrom: " + FTF.getSelectedItem().toString());
        area.setText(area.getText() + "\n\nTo: " + TTF.getSelectedItem().toString());
        area.setText(area.getText() + "\n\nNumber of Passengers: " + Pass.getText());
        area.setText(area.getText() + "\n\nFlight Class: " + cabin.getSelectedItem().toString());
        area.setText(area.getText() + "\n\n*************************************************************\n");

        try {

            FileWriter Writer = new FileWriter("TicketBooked.txt", false);
            Writer.write(area.getText() + "\n\n\n");
            Writer.close();

            FileWriter printer = new FileWriter("Ticket.txt", false);
            printer.write(PassNum + "," + FlightID + "," + FirstN + "," + LastN + "," + Email + "\n");
            printer.close();
        } catch (IOException ex) {

        }

    }

    private void printTicket(String trip) {
        String username;
        String password;
        int FlightID = 0;
        String Email = null, FirstN = null, LastN = null, PassNum = null, CNIC = null;
        File CurrentUser = new File("CurrentUser.txt");
        try {
            Scanner scanner = new Scanner(CurrentUser);
            String line;

            while (scanner.hasNextLine() && !isBlank(line = scanner.nextLine())) {
                String[] accountData = line.split(",");
                String user = accountData[0];
                String pass = accountData[1];
                String email = accountData[2];
                String fn = accountData[3];
                String ln = accountData[4];
                String passno = accountData[5];
                String cnic = accountData[6];

                username = user;
                password = pass;
                Email = email;
                FirstN = fn;
                LastN = ln;
                PassNum = passno;
                CNIC = cnic;
                FlightID = (int) (Math.random() * 1000);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "File not found");
        }
        if (trip.equals("Return")) {
            area.setText("*************************************************************\n");
            area.setText(area.getText() + "*                                      Booked Ticket                                   *\n");
            area.setText(area.getText() + "*************************************************************\n\n");
            area.setText(area.getText() + "Flight ID: " + Integer.toString(FlightID));
            area.setText(area.getText() + "\n\nFirst Name: " + FirstN);
            area.setText(area.getText() + "\n\nLast Name: " + LastN);
            area.setText(area.getText() + "\n\nPassport Number: " + PassNum);
            area.setText(area.getText() + "\n\nEmail: " + Email);
            area.setText(area.getText() + "\n\nDate of Departure: " + Dep.getDate());
            area.setText(area.getText() + "\n\nDate of Return: " + Return.getDate());
            area.setText(area.getText() + "\n\nFrom: " + FTF.getSelectedItem().toString());
            area.setText(area.getText() + "\n\nTo: " + TTF.getSelectedItem().toString());
            area.setText(area.getText() + "\n\nNumber of Passengers: " + Pass.getText());
            area.setText(area.getText() + "\n\nFlight Class: " + cabin.getSelectedItem().toString());
            area.setText(area.getText() + "\n\n*************************************************************\n");

            try {
                FileWriter Writer = new FileWriter("TicketBooked.txt", false);
                Writer.write(area.getText() + "\n\n\n");
                Writer.close();

                FileWriter printer = new FileWriter("Ticket.txt", false);
                printer.write(PassNum + "," + FlightID + "," + FirstN + "," + LastN + "," + Email + "\n");
                printer.close();
            } catch (IOException ex) {

            }
        } else if (trip.equals("Multi-city")) {
            area.setText("*************************************************************\n");
            area.setText(area.getText() + "*                                      Booked Ticket                                   *\n");
            area.setText(area.getText() + "*************************************************************\n\n");
            area.setText(area.getText() + "Flight ID: " + Integer.toString(FlightID));
            area.setText(area.getText() + "\n\nFirst Name: " + FirstN);
            area.setText(area.getText() + "\n\nLast Name: " + LastN);
            area.setText(area.getText() + "\n\nPassport Number: " + PassNum);
            area.setText(area.getText() + "\n\nEmail: " + Email);
            area.setText(area.getText() + "\n\nDate of Departure: " + Dep.getDate());
            area.setText(area.getText() + "\n\nFrom: " + FTF.getSelectedItem().toString());
            area.setText(area.getText() + "\n\nTo: " + TTF.getSelectedItem().toString());
            area.setText(area.getText() + "\n\nDate of Departure: " + DepM.getDate());
            area.setText(area.getText() + "\n\nFrom: " + FTFM.getSelectedItem().toString());
            area.setText(area.getText() + "\n\nTo: " + TTFM.getSelectedItem().toString());
            area.setText(area.getText() + "\n\nNumber of Passengers: " + Pass.getText());
            area.setText(area.getText() + "\n\nFlight Class: " + cabin.getSelectedItem().toString());
            area.setText(area.getText() + "\n\n*************************************************************\n");

            try {
                FileWriter Writer = new FileWriter("TicketBooked.txt", false);
                Writer.write(area.getText() + "\n\n\n");
                Writer.close();

                FileWriter printer = new FileWriter("Ticket.txt", false);
                printer.write(PassNum + "," + FlightID + "," + FirstN + "," + LastN + "," + Email + "\n");
                printer.close();
            } catch (IOException ex) {

            }
        }

    }

    public void setDefaultVisiblity() {
        FTF.setVisible(false);
        TTF.setVisible(false);
        From.setVisible(false);
        To.setVisible(false);
        Reverse.setVisible(false);
        Dep.setVisible(false);
        Departure.setVisible(false);
        FTFM.setVisible(false);
        TTFM.setVisible(false);
        FromM.setVisible(false);
        ToM.setVisible(false);
        DepartureM.setVisible(false);
        DepM.setVisible(false);
        Return.setVisible(false);
        ReturnL.setVisible(false);
        ReverseM.setVisible(false);
        area.setVisible(false);
        jScrollPane1.setVisible(false);
        ConfirmPass.setVisible(false);
    }

    private static boolean isBlank(String s) {
        return s == null || s.isEmpty();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());

                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ATS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ATS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ATS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ATS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ATS().setVisible(true);

            }
        });

    }
    private boolean hello = true;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BookingPanel;
    private javax.swing.JButton Cancel;
    private javax.swing.JButton ConfirmPass;
    private com.toedter.calendar.JDateChooser Dep;
    private com.toedter.calendar.JDateChooser DepM;
    private javax.swing.JLabel Departure;
    private javax.swing.JLabel DepartureM;
    private javax.swing.JTextField FID;
    private javax.swing.JComboBox<String> FTF;
    private javax.swing.JComboBox<String> FTFM;
    private javax.swing.JLabel From;
    private javax.swing.JLabel FromM;
    private javax.swing.JPanel ModifyPanel;
    private javax.swing.JTextField PN;
    private javax.swing.JTextField Pass;
    private javax.swing.JButton Print;
    private com.toedter.calendar.JDateChooser Return;
    private javax.swing.JLabel ReturnL;
    private javax.swing.JLabel Reverse;
    private javax.swing.JLabel ReverseM;
    private javax.swing.JComboBox<String> TTF;
    private javax.swing.JComboBox<String> TTFM;
    private javax.swing.JLabel To;
    private javax.swing.JLabel ToM;
    private javax.swing.JComboBox<String> TripCB;
    private javax.swing.JTextArea area;
    private javax.swing.JComboBox<String> cabin;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane2;
    // End of variables declaration//GEN-END:variables

}
